{
  "swagger": "2.0",
  "info": {
    "version": "1.10.3 - latest",
    "title": "Swagger Hemis"
  },
  "host": "127.0.0.1:8080",
  "basePath": "/hemis/rest",
  "tags": [
    {
      "name": "accounts"
    },
    {
      "name": "agendas"
    },
    {
      "name": "ambiances"
    },
    {
      "name": "connector link"
    },
    {
      "name": "data"
    },
    {
      "name": "file-system"
    },
    {
      "name": "gateways"
    },
    {
      "name": "intelligent-things"
    },
    {
      "name": "learning"
    },
    {
      "name": "factors"
    },
    {
      "name": "scenario"
    },
    {
      "name": "system"
    },
    {
      "name": "tags"
    },
    {
      "name": "tarifications"
    },
    {
      "name": "users"
    },
    {
      "name": "anomalies"
    },
    {
      "name": "zones"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/WS_AccountManagement/{accountId}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Synchronize account information",
        "description": "Required permission: accounts_read. ",
        "operationId": "get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccountClient"
            }
          },
          "404": {
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Delete an account",
        "description": "Required permission: accounts_delete. ",
        "operationId": "remove",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_AccountManagement/list": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "List all accounts",
        "description": "Required permission: accounts_read. ",
        "operationId": "list",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountClient"
              }
            }
          }
        }
      }
    },
    "/WS_AccountManagement/{accountId}/it/{itId}/bound": {
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Enable or disable an object.",
        "description": "Required permission: accounts_intelligent_things_enable_write. ",
        "operationId": "setBound",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the object.",
            "required": true,
            "type": "string"
          },
          {
            "name": "bound",
            "in": "formData",
            "description": "enable/disable",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Account or Object not found.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_AccountManagement/{accountId}/learn/IO/inSystem": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Search for IO-inSystem device",
        "description": "Required permission: accounts_learn. ",
        "operationId": "learnIOInSystem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_AccountManagement/{accountId}/learn/IO": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Search for new IO objects",
        "description": "Required permission: accounts_learn. This operation is available only for accounts that handle IO protocol.",
        "operationId": "learnIO",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Account or Object not found.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_AccountManagement/{accountId}/learn/OVP": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Search for new OVP objects",
        "description": "Required permission: accounts_learn. This operation is available only for accounts that handle OVP protocol.",
        "operationId": "learnOVP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Account or Object not found.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_AccountManagement/{accountId}/its": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get all objets of an account.",
        "description": "Required permission: accounts_intelligent_things_read. ",
        "operationId": "getIts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ITClientAccount"
              }
            }
          },
          "404": {
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_AccountManagement/{accountId}/update": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Update account configuration.",
        "description": "Required permission: accounts_update. ",
        "operationId": "updateOptionalFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated account configuration.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountOptionalFields"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_AccountManagement/{accountId}/learn/vaillant/{serialNumber}": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Search for vaillant device",
        "description": "Required permission: accounts_learn. ",
        "operationId": "learnVaillantSpecificDevice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          },
          {
            "name": "serialNumber",
            "in": "path",
            "description": "Hardware identifier of the boiler to discover.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_AccountManagement/{accountType}": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Add an account",
        "description": "Required permission: accounts_create. ",
        "operationId": "addAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountType",
            "in": "path",
            "description": "Type of the account to add.",
            "required": true,
            "type": "string",
            "enum": [
              "NETATMO",
              "ZIPATO"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccountClient"
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_AccountManagement/{accountId}/learn/ZWAVE": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Search for ZWAVE devices.",
        "description": "Required permission: accounts_learn. ",
        "operationId": "learnZWAVE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_AccountManagement/{accountId}/synchronize": {
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Synchronize account",
        "description": "Required permission: accounts_sync. ",
        "operationId": "synchronize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Identifier of the account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AccountClient"
            }
          },
          "404": {
            "description": "Account not found.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/zones/{zoneId}/agendas/{factorId}": {
      "get": {
        "tags": [
          "agendas"
        ],
        "summary": "Get an agenda",
        "description": "Required permission: agendas_read. ",
        "operationId": "getAgenda",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AgendaClientBase"
            }
          },
          "404": {
            "description": "Invalid zone or factor identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "agendas"
        ],
        "summary": "Add an agenda",
        "description": "Required permission: agendas_create. ",
        "operationId": "addAgenda",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": " Agenda object to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgendaClientBase"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AgendaClientBase"
            }
          },
          "404": {
            "description": "Invalid zone or factor identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "agendas"
        ],
        "summary": "Update an agenda",
        "description": "Required permission: agendas_update. ",
        "operationId": "updateAgenda",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The updated Agenda",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgendaClientBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AgendaClientBase"
            }
          },
          "404": {
            "description": "Invalid zone or factor identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "agendas"
        ],
        "summary": "Delete an agenda.",
        "description": "Required permission: agendas_delete. ",
        "operationId": "deleteAgenda",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Invalid zone or factor identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/zones/{zoneId}/agendas": {
      "get": {
        "tags": [
          "agendas"
        ],
        "summary": "Get all agenda of a zone",
        "description": "Required permission: agendas_read. ",
        "operationId": "getAllAgendas",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgendaClientBase"
              }
            }
          },
          "404": {
            "description": "Invalid zone identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/zones/{zoneId}/agendas/{factorId}/base": {
      "patch": {
        "tags": [
          "agendas"
        ],
        "summary": "Update days of an agenda.",
        "description": "Required permission: agendas_base_update. This will update only the \"days\" attribute of an agenda.",
        "operationId": "updateBase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The modified days",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "$ref": "#/definitions/TimeIntervalConsign"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AgendaClientBase"
            }
          },
          "404": {
            "description": "Invalid zone or factor identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/zones/{zoneId}/agendas/{factorId}/view": {
      "get": {
        "tags": [
          "agendas"
        ],
        "summary": "Get computed agenda for a period",
        "description": "Required permission: agendas_read. Get the computed agenda (result of agenda.days + overrides) for a period. If both startDay and endDay are unspecified, a default period corresponding to the current month will be returned.",
        "operationId": "getAgendaView",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDay",
            "in": "query",
            "description": "First day of the period in format 'dd/MM/yyyy'.",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDay",
            "in": "query",
            "description": "Last day of the period in format 'dd/MM/yyyy'.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone or factor identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/zones/{zoneId}/agendas/{factorId}/overrides": {
      "get": {
        "tags": [
          "agendas"
        ],
        "summary": "Get all overrides of an agenda",
        "description": "Required permission: agendas_override_read. ",
        "operationId": "getAgendaOverrides",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter overrides that take effect after a date (format 'dd/MM/yyyy').",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter overrides that take effect before a date (format 'dd/MM/yyyy').",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OverrideClientBase"
              }
            }
          },
          "404": {
            "description": "Invalid zone or factor identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "agendas"
        ],
        "summary": "Add an override to an agenda",
        "description": "Required permission: agendas_override_create. ",
        "operationId": "addAgendaOverride",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Override object to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OverrideClientBase"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OverrideClientBase"
            }
          },
          "404": {
            "description": "Invalid zone or factor identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/zones/{zoneId}/agendas/{factorId}/overrides/{overrideId}": {
      "get": {
        "tags": [
          "agendas"
        ],
        "summary": "Get an override",
        "description": "Required permission: agendas_override_read. ",
        "operationId": "getAgendaOverride",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "name": "overrideId",
            "in": "path",
            "description": "Identifier of the override",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OverrideClientBase"
            }
          },
          "404": {
            "description": "Invalid zone, factor or override identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "agendas"
        ],
        "summary": "Update an override",
        "description": "Required permission: agendas_override_update. ",
        "operationId": "updateAgendaOverride",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "name": "overrideId",
            "in": "path",
            "description": "Identifier of the override",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated override object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OverrideClientBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OverrideClientBase"
            }
          },
          "404": {
            "description": "Invalid zone, factor or override identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "agendas"
        ],
        "summary": "Delete an override",
        "description": "Required permission: agendas_override_delete. ",
        "operationId": "deleteAgendaOverride",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "name": "overrideId",
            "in": "path",
            "description": "Identifier of the override",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Invalid zone, factor or override identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/zones/{zoneId}/agendas/{factorId}/overrides/conflicts": {
      "post": {
        "tags": [
          "agendas"
        ],
        "summary": "Get override conflicts",
        "description": "Required permission: agendas_override_read. View potential conflict between an override and to be added and already existing overrides.",
        "operationId": "getAgendaOverrideConflicts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Identifier of the zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "Identifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Override object to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OverrideClientBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OverrideConflict"
              }
            }
          },
          "404": {
            "description": "Invalid zone or factor identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/ambiances": {
      "get": {
        "tags": [
          "ambiances"
        ],
        "summary": "Get all ambiances",
        "description": "Required permission: ambiances_read. ",
        "operationId": "getAllAmbiances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "query",
            "description": "Filter to specify a zone. This is used in conjunction with filterValues and/or filterEmpty flag.",
            "required": false,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "query",
            "description": "Filter to specify a factor. This is used in conjunction with filterValues and/or filterEmpty flag.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterValues",
            "in": "query",
            "description": "This requires zoneId and/or factorId to be specified. If set to true the returned ambiances will contain values matching the specified filters.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filterEmpty",
            "in": "query",
            "description": " If set to true, empty ambiances won't be returned. If this is used without filter enable and zoneId and/or factorId specified, it will return only ambiances that have at least on value matching the specified zoneId/factorId.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AmbianceDTO"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ambiances"
        ],
        "summary": "Create an ambiance",
        "description": "Required permission: ambiances_create. ",
        "operationId": "addAmbiance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ambiance to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AmbianceDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created"
          },
          "422": {
            "description": "Invalid request parameters."
          }
        }
      }
    },
    "/ambiances/{ambianceId}/apply": {
      "post": {
        "tags": [
          "ambiances"
        ],
        "summary": "Apply an ambiance",
        "description": "Required permission: ambiances_apply. ",
        "operationId": "applyAmbiance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ambianceId",
            "in": "path",
            "description": "Identifier of the ambiance to apply.",
            "required": true,
            "type": "string"
          },
          {
            "name": "zoneId",
            "in": "query",
            "description": "If specified, the ambiance will be applied only to this zone. If this zone is a meta zone, the ambiance will be applied to all of it's sub zones.",
            "required": false,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "query",
            "description": "If specified, the ambiance will be applied only for this factor.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Ambiance not found"
          }
        }
      }
    },
    "/ambiances/{ambianceId}": {
      "get": {
        "tags": [
          "ambiances"
        ],
        "summary": "Get an ambiance",
        "description": "Required permission: ambiances_read. ",
        "operationId": "getAmbiance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ambianceId",
            "in": "path",
            "description": "Identifier of the ambiance.",
            "required": true,
            "type": "string"
          },
          {
            "name": "zoneId",
            "in": "query",
            "description": "Filters applied to ambiance's value. If specified, the retrieved ambiance will only contain values matching this zoneId.",
            "required": false,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "query",
            "description": "Filters applied to ambiance's value. If specified, the retrieved ambiance will only contain values matching this factorId.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AmbianceDTO"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ambiances"
        ],
        "summary": "Update an ambiance",
        "description": "Required permission: ambiances_update. ",
        "operationId": "updateAmbiance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ambianceId",
            "in": "path",
            "description": "Identifier of the ambiance to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": " The new value of the ambiance",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AmbianceDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AmbianceDTO"
            }
          },
          "404": {
            "description": "Ambiance not found"
          },
          "422": {
            "description": "Invalid request parameters."
          }
        }
      },
      "delete": {
        "tags": [
          "ambiances"
        ],
        "summary": "Apply an ambiance",
        "description": "Required permission: ambiances_delete. ",
        "operationId": "deleteAmbiance",
        "parameters": [
          {
            "name": "ambianceId",
            "in": "path",
            "description": "Identifier of the ambiance to apply.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Ambiance not found"
          }
        }
      }
    },
    "/ambiances/current": {
      "get": {
        "tags": [
          "ambiances"
        ],
        "summary": "Get current ambiances",
        "description": "Required permission: ambiances_current_read. Get the for each zone and factor the selected ambiance",
        "operationId": "getCurrentAmbiance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "query",
            "description": "Zone identifier.",
            "required": false,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "query",
            "description": "Factor identifier.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SelectedAmbianceDTO"
              }
            }
          }
        }
      }
    },
    "/ambiances/reset": {
      "post": {
        "tags": [
          "ambiances"
        ],
        "summary": "Clear ambiances",
        "description": "Required permission: ambiances_reset. Clear ambiances for the specified zone and or factor.",
        "operationId": "resetAmbiance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "query",
            "description": "Filter that specify a zone that should be reset. If unspecified the reset will be applied cross zone. If the zone is a meta zone, the reset will be applied to all          of it's subzones.",
            "required": false,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "query",
            "description": "Filter that specify a factor that should be reset. If unspecified the reset will be applied to all factor.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/connector-links": {
      "get": {
        "tags": [
          "connector link"
        ],
        "summary": "Get link list",
        "description": "Required permission: connectors_links_read. ",
        "operationId": "getLinkList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Link"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "connector link"
        ],
        "summary": "Create a new link between connectors",
        "description": "Required permission: connectors_links_create. ",
        "operationId": "createLink",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sItId",
            "in": "formData",
            "description": "id of the slave it",
            "required": true,
            "type": "string"
          },
          {
            "name": "sCTypeId",
            "in": "formData",
            "description": "type id of the slave connector",
            "required": true,
            "type": "string"
          },
          {
            "name": "mItId",
            "in": "formData",
            "description": "id of the master it",
            "required": true,
            "type": "string"
          },
          {
            "name": "mCTypeId",
            "in": "formData",
            "description": "type id of the master connector",
            "required": true,
            "type": "string"
          },
          {
            "name": "rep",
            "in": "formData",
            "description": "representation code of the link",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref",
            "in": "formData",
            "description": "reference of the link",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        }
      }
    },
    "/connector-links/{linkId}": {
      "delete": {
        "tags": [
          "connector link"
        ],
        "summary": "Delete a link by his id or reference",
        "description": "Required permission: connectors_links_delete. ",
        "operationId": "deleteLink",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "linkId",
            "in": "path",
            "description": "Link id or reference",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/data/types/{id}": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "Get a data source type.",
        "description": "Required permission: data_ontology_read. ",
        "operationId": "getType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the queried data source type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DataSourceType"
            }
          },
          "422": {
            "description": "No data source type is matching for the given ID.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/data": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "Get the time series data. Allow a custom selection according to multiple filters.",
        "description": "Required permission: data_read. Returns a list of series (from 0 to x) depending on the wideness of the chosen filters. The answer could be : SUCCESS (all requested data retrieved), PARTIAL (data retrieved but some synthesis points are missing in the requested interval), FAIL (no data points for this resquest), ERROR (problem occured while requesting). If the answer is PARTIAL, the missing data gaps are given in the \"missingPeriods\" field. The performed query is always given back : its fields \"pagingNewBeginDate\" and \"pagingNewEndDate\" is specified when answer is too big and the dataprovider is paging (this date will be the limit (begin or end) of the next request to call). ",
        "operationId": "getData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "measurement",
            "in": "query",
            "description": "measurement filter, represents the type of the data (with a specific unit, or no unit for qualitative series) (ex. TEMP for temperature in °C)",
            "required": false,
            "type": "string"
          },
          {
            "name": "nature",
            "in": "query",
            "description": "nature filter, it is the type of source, out of values : SEN, ACT, FACT, PRED, EXT, IT, TAR (for respectively : SENsors, ACTuators, FACTors, PREDiction, EXTernal_info, Intelligent Things, TARget)",
            "required": false,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "group filter : group is a sub-category for a measurement (ex. TEMP), most of the time it is the ID of the environmental factor in Hemis (ex. TMP, VALVE_TMP ...)",
            "required": false,
            "type": "string"
          },
          {
            "name": "dsid",
            "in": "query",
            "description": "unique ID of the data source (ex. a sensorID, an actuatorID ...)",
            "required": false,
            "type": "string"
          },
          {
            "name": "zone",
            "in": "query",
            "description": "zone filter : the ID of a specific zone (ex. Kitchen_1234 ) OR \"outside\" (reserved string) for data from outside the building (ex. weather) OR an IT_STATE component (ex. PAIR_ST) [in this case zone is used instead of group for optimisation purposes]",
            "required": false,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "granularity : accuracy of data synthesis i.e. duration between 2 values in s. (ex. 1 value/1h = 3600) [Default: 0 (real time)]",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "begin",
            "in": "query",
            "description": "Begin date (timestamp in ms) [Default: no begin date, i.e. all data until end date]",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "End date (timestamp in ms) [Default: no end date, i.e. all data from begin date]",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "List of fields separated by \";\" (out of : VALUENB;VALUESTR;MINIMUM;MAXIMUM;MAXIMUMOCC;LAST;AVERAGE;RELIABILITY;NBPOINT;DIFF) [Default: all available fields]",
            "required": false,
            "type": "string"
          },
          {
            "name": "cpid",
            "in": "query",
            "description": "Custom persistence ID of the data source Type (Reserved for persistence policy customisation of different sources sharing a common source type) [in order to select only a dataSourceTypes without a cpid specify cpid=\"\"]",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "description": "Get only the n last points in chronological order (most recent points) (use negative number -n to get the n first points (oldest points))",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DataProviderAnswer"
            }
          },
          "422": {
            "description": "wrong query.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Something went wrong with authorizations management",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/data/types": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "Get the data source type ontology.",
        "description": "Required permission: data_ontology_read. ",
        "operationId": "getOntology",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "full",
            "in": "query",
            "description": "Set to true to get the exhaustive ontology even if the data is not present in this building",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DataSourceTypeOntology"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "data"
        ],
        "summary": "Add a new persistence description for each data source given in parameter (using its ID).",
        "description": "Required permission: data_ontology_update. ",
        "operationId": "addNewPersistenceDescriptions",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A map where the key is the ID of a data source type and the value is the corresponding new persistence description we want to set.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/DataPersistenceDescription"
              }
            }
          }
        ],
        "responses": {
          "422": {
            "description": "An ID is matching no data source type.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/data/series": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "Get the data source type ontology.",
        "description": "Required permission: data_read. ",
        "operationId": "getSeries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "measurement",
            "in": "query",
            "description": "measurement filter, represents the type of the data (with a specific unit, or no unit for qualitative series) (ex. TEMP for temperature in °C)",
            "required": false,
            "type": "string"
          },
          {
            "name": "nature",
            "in": "query",
            "description": "nature filter, it is the type of source, out of values : SEN, ACT, FACT, PRED, EXT, IT, TAR (for respectively : SENsors, ACTuators, FACTors, PREDiction, EXTernal_info, Intelligent Things, TARget)",
            "required": false,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "group filter : group is a sub-category for a measurement (ex. TEMP), most of the time it is the ID of the environmental factor in Hemis (ex. TMP, VALVE_TMP ...)",
            "required": false,
            "type": "string"
          },
          {
            "name": "zone",
            "in": "query",
            "description": "zone filter : the ID of a specific zone (ex. Kitchen_1234 ) OR \"outside\" (reserved string) for data from outside the building (ex. weather) OR an IT_STATE component (ex. PAIR_ST) [in this case zone is used instead of group for optimisation purposes]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataMeasurementSeries"
              }
            }
          }
        }
      }
    },
    "/file-system/objects": {
      "get": {
        "tags": [
          "file-system"
        ],
        "summary": "Get file",
        "description": "Required permission: files_public_read. Access some file.",
        "operationId": "getDFSResource",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Path of the requested file.",
            "required": true,
            "type": "string"
          },
          {
            "name": "refresh",
            "in": "query",
            "description": "True to force refresh of the file. Otherwise local cache file will be used if present.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "file"
            }
          }
        }
      }
    },
    "/WS_GatewayManagement/add": {
      "post": {
        "tags": [
          "gateways"
        ],
        "summary": "Add a gateway",
        "description": "Required permission: gateways_create. The gatewayId must match a NFC identifier of a gateway registered into quickmove.",
        "operationId": "add",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gatewayId",
            "in": "formData",
            "description": "NFC tag of the gateway",
            "required": true,
            "type": "string"
          },
          {
            "name": "gatewayName",
            "in": "formData",
            "description": "User given name of the gateway.",
            "required": true,
            "type": "string"
          },
          {
            "name": "locked",
            "in": "formData",
            "description": "locked",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GatewayClient"
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_GatewayManagement/{gatewayId}": {
      "get": {
        "tags": [
          "gateways"
        ],
        "summary": "Get a gateway",
        "description": "Required permission: gateways_read. ",
        "operationId": "get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gatewayId",
            "in": "path",
            "description": "Identifier (NFC) of the gateway.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GatewayClient"
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "gateways"
        ],
        "summary": "Update a gateway",
        "description": "Required permission: gateways_update. ",
        "operationId": "update",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gatewayId",
            "in": "path",
            "description": "Identifier (NFC) of the gateway.",
            "required": true,
            "type": "string"
          },
          {
            "name": "gatewayName",
            "in": "formData",
            "description": "New name of the gateway",
            "required": true,
            "type": "string"
          },
          {
            "name": "locked",
            "in": "formData",
            "description": "locked",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GatewayClient"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "gateways"
        ],
        "summary": "Delete a gateway",
        "description": "Required permission: gateways_delete. ",
        "operationId": "remove",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gatewayId",
            "in": "path",
            "description": "Identifier (NFC) of the gateway.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GatewayClient"
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_GatewayManagement/{gatewayId}/replace": {
      "post": {
        "tags": [
          "gateways"
        ],
        "summary": "Replace a gateway",
        "description": "Required permission: gateways_replace. The gatewayId must match a NFC identifier of a gateway registered into quickmove.",
        "operationId": "replace",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gatewayId",
            "in": "path",
            "description": "Identifier of the replaced gateway.",
            "required": true,
            "type": "string"
          },
          {
            "name": "newGatewayId",
            "in": "formData",
            "description": "NFC tag of the gateway",
            "required": true,
            "type": "string"
          },
          {
            "name": "newGatewayName",
            "in": "formData",
            "description": "User given name of the gateway.",
            "required": false,
            "type": "string"
          },
          {
            "name": "locked",
            "in": "formData",
            "description": "locked",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GatewayClient"
            }
          }
        }
      }
    },
    "/WS_GatewayManagement/list": {
      "get": {
        "tags": [
          "gateways"
        ],
        "summary": "Get all gateways",
        "description": "Required permission: gateways_read. ",
        "operationId": "list",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GatewayClient"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_GatewayManagement/{gatewayId}/its": {
      "get": {
        "tags": [
          "gateways"
        ],
        "summary": "Get intelligent things of a gateway",
        "description": "Required permission: gateways_intelligent_things_read. ",
        "operationId": "getIts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gatewayId",
            "in": "path",
            "description": "Identifier (NFC) of the gateway.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ITInformation",
            "in": "query",
            "description": "If false or unspecified the returned object wil be an ITClientList. Otherwise a list of ITInformation will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ITInformation"
              }
            }
          }
        }
      }
    },
    "/WS_GatewayManagement/{gatewayId}/enable": {
      "put": {
        "tags": [
          "gateways"
        ],
        "summary": "Enable/Disable a gateway",
        "description": "Required permission: gateways_enable_write. ",
        "operationId": "setEnable",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gatewayId",
            "in": "path",
            "description": "Identifier (NFC) of the gateway.",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "description": "Enable/Disable the gateway",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get all intelligent-things",
        "description": "Required permission: intelligent_things_read. ",
        "operationId": "list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "match",
            "in": "query",
            "description": "A filter for requesting only it with a name/type name/zone name matching a certain pattern.",
            "required": false,
            "type": "string"
          },
          {
            "name": "zoneId",
            "in": "query",
            "description": "Filter on the inteligent-things's zones.",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "Filter on the inteligent-things's types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "comId",
            "in": "query",
            "description": "Filter on the inteligent-things's communication Id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of its returned by the request.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "index",
            "in": "query",
            "description": "If the hemis contains 6 intelligent-things, size is set at 3 and index at 2, the request will return intelligent-things [2,3,4].",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ITInformation",
            "in": "query",
            "description": "If false or unspecified the returned object wil be an ITClientList. Otherwise a list of ITInformation will be returned.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "categories_filter",
            "in": "query",
            "description": "Specifies the list of IT categories to be retrieved. Can be combination of 'DEFAULT', 'GATEWAY' 'BRIDGE'.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ITInformation"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Add an intelligent-things",
        "description": "Required permission: intelligent_things_create. ",
        "operationId": "add",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "reset",
            "in": "query",
            "description": "If true, all known instance specific data will be erased.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "overrideType",
            "in": "query",
            "description": "If false or unspecified the type information will be retrieved from quickmove. Otherwise type information should be send along with the intelligent-thing.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "useVirtualConfig",
            "in": "query",
            "description": "Used only if 'correspondigVirtualIt' is set. If true, instance specific configuration will be overriden by those of the virtual it. Otherwise the intelligent-thing configuration from this request will be used as is.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Intelligent-thing to add.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ITInformation"
            }
          },
          {
            "name": "ITInformation",
            "in": "query",
            "description": "If false or unspecified the returned object wil be an ITClientDetail. Otherwise an ITInformation will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ITInformation"
            }
          }
        }
      }
    },
    "/intelligent-things/{itId}": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get an intelligent-thing.",
        "description": "Required permission: intelligent_things_read. ",
        "operationId": "find",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ITInformation",
            "in": "query",
            "description": "If false or unspecified the returned object wil be an ITClientDetail. Otherwise an ITInformation will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Update an intelligent-thing",
        "description": "",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The updated intelligent-thing.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ITInformation"
            }
          },
          {
            "name": "ITInformation",
            "in": "query",
            "description": "If false or unspecified the returned object wil be an ITClientDetail. Otherwise an ITInformation will be returned.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "move_virtual",
            "in": "query",
            "description": "if zone update move also associated virtual if existing",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ITInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Delete an intelligent-thing",
        "description": "Required permission: intelligent_things_delete. ",
        "operationId": "suppressIT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "restoreVirtual",
            "in": "query",
            "description": "If true or unspecified and the suppressed IT was real and associated to a virtual, the virtual IT will be restored. Otherwise the associated virtual will remain suppressed.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/joinGroup": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Add an intelligent-thing to a group.",
        "description": "Required permission: intelligent_things_join_group. ",
        "operationId": "joinGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Identifier of the source hardware.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ActuatorsStatesClient"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/leaveGroup": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Remove an intelligent-thing from a group.",
        "description": "Required permission: intelligent_things_leave_group. ",
        "operationId": "leaveGroup",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "grp",
            "in": "formData",
            "description": "The name of the group to leave.",
            "required": true,
            "type": "string"
          },
          {
            "name": "itId",
            "in": "formData",
            "description": "Identifier of IT ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/stopCalibrate": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Stop calibration of an intelligent-things.",
        "description": "Required permission: intelligent_things_calibrate. ",
        "operationId": "stopCalibrate",
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/actuator/{actuatorId}/source": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Link an actuator to a source hardware.",
        "description": "Required permission: actuators_source_write. ",
        "operationId": "linkToSource",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "actuatorId",
            "in": "path",
            "description": "Identifier of the actuator.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Identifier of the source hardware.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ActuatorSourceClient"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Unlink an actuator from his source hardware.",
        "description": "Required permission: actuators_source_write. ",
        "operationId": "unlinkFromSource",
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "actuatorId",
            "in": "path",
            "description": "Identifier of the actuator.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/summerMode": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Set the summer mode sate",
        "description": "Required permission: intelligent_things_summer_mode_write. ",
        "operationId": "summerMode",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "activate",
            "in": "formData",
            "description": "Desired mode.",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/calibrate": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Start calibration of an intelligent-things.",
        "description": "Required permission: intelligent_things_calibrate. ",
        "operationId": "calibrate",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "complex",
            "in": "formData",
            "description": "Set to true to start an advanced calibration.",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/hardware/{hardwareId}/activate": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Activate an hardware.",
        "description": "Required permission: hardwares_activated_write. ",
        "operationId": "activateHardware",
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "hardwareId",
            "in": "path",
            "description": "Identifier of the hardware.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/lanDevices": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get intelligent-things discovered on lan.",
        "description": "Required permission: gateways_intelligent_things_read. ",
        "operationId": "getLANDevices",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/actuators": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get all intelligent-thing's actuators.",
        "description": "Required permission: actuators_read. ",
        "operationId": "getActuators",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "query",
            "description": "Filter on the inteligent-things's zones.",
            "required": false,
            "type": "string"
          },
          {
            "name": "factorsFilter",
            "in": "query",
            "description": "list of factor types separated with ',' (ex : \"TMP,HUM\" )",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/actuators": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get all intelligent-thing's actuators.",
        "description": "Required permission: actuators_read. ",
        "operationId": "getActuators",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActuatorClient"
              }
            }
          }
        }
      }
    },
    "/intelligent-things/{itId}/actuator/{actuatorId}": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get an actuator of an intelligent-thing.",
        "description": "Required permission: actuators_read. ",
        "operationId": "getActuator",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "actuatorId",
            "in": "path",
            "description": "Identifier of the actuator.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ActuatorClient"
            }
          }
        }
      }
    },
    "/intelligent-things/{itId}/actuator/{actuatorId}/state": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get an actuator's state.",
        "description": "Required permission: actuators_data_current_read. ",
        "operationId": "getActuatorState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "actuatorId",
            "in": "path",
            "description": "Identifier of the actuator.",
            "required": true,
            "type": "string"
          },
          {
            "name": "binary",
            "in": "query",
            "description": "If false or unspecified the state will be return with his granularity expected. Otherwise the state will be 0 or 1.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Set an actuator's state.",
        "description": "Required permission: actuators_data_current_write. ",
        "operationId": "setActuatorState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "actuatorId",
            "in": "path",
            "description": "Identifier of the actuator.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Reset an actuator's state.",
        "description": "Required permission: actuators_data_current_write. ",
        "operationId": "clearActuatorState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "actuatorId",
            "in": "path",
            "description": "Identifier of the actuator.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/listV2": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get all intelligent-things",
        "description": "Required permission: intelligent_things_read. ",
        "operationId": "list2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "match",
            "in": "query",
            "description": "A filter for requesting only it with a name/type name/zone name matching a certain pattern.",
            "required": false,
            "type": "string"
          },
          {
            "name": "zoneId",
            "in": "query",
            "description": "Filter on the inteligent-things's zones.",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "Filter on the inteligent-things's types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "comId",
            "in": "query",
            "description": "Filter on the inteligent-things's communication Id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of its returned by the request.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "index",
            "in": "query",
            "description": "If the hemis contains 6 intelligent-things, size is set at 3 and index at 2, the request will return intelligent-things [2,3,4].",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "categories_filter",
            "in": "query",
            "description": "Specifies the list of IT categories to be retrieved. Can be combination of 'DEFAULT', 'GATEWAY' 'BRIDGE'.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ITInformation"
              }
            }
          }
        }
      }
    },
    "/intelligent-things/{itId}/sensors/{sensorId}": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get a sensor.",
        "description": "Required permission: sensors_read. ",
        "operationId": "getSensor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sensorId",
            "in": "path",
            "description": "Identifier of the sensor.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SensorClient"
            }
          }
        }
      }
    },
    "/intelligent-things/alternativeSensor": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Create an alternative sensor.",
        "description": "Required permission: intelligent_things_create. ",
        "operationId": "addAlternativeSensor",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currentZoneID",
            "in": "formData",
            "description": "Identifier of the zone where factor data are red.",
            "required": false,
            "type": "string"
          },
          {
            "name": "factorID",
            "in": "formData",
            "description": "Identifier of the factor that should be exported.",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetZoneID",
            "in": "formData",
            "description": "Identifier of the zone where factor data will be exported.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/lanDevices/refresh": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Start intelligent-things discovery on lan.",
        "description": "Required permission: gateways_learn. ",
        "operationId": "refreshLANDevices",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/actuators/state": {
      "put": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Set multiple actuator's state.",
        "description": "Required permission: actuators_data_current_write. ",
        "operationId": "setActuatorsStates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User preference to inject.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserPrefMultiSetting"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/multiple-update": {
      "put": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Update a batch of intelligent-things",
        "description": "",
        "operationId": "updateBatchObjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Intelligent-things to update.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ITInformation"
              }
            }
          },
          {
            "name": "move_virtual",
            "in": "query",
            "description": "if zone update move also associated virtual if existing",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/intelligent-things/multiple-delete": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Delete multiple intelligent-things",
        "description": "Required permission: intelligent_things_delete. ",
        "operationId": "suppressMultipleITs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of it ids to remove.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "restoreVirtuals",
            "in": "query",
            "description": "If true or unspecified and the suppressed IT was real and associated to a virtual, the virtual IT will be restored. Otherwise the associated virtual will remain suppressed.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/action-mappings": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get an intelligent-things' action mapping.",
        "description": "Required permission: intelligent_things_action_mapping_read. ",
        "operationId": "getItActionMapping",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/sensors/{sensorId}/action-mappings": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get a sensor's action mapping.",
        "description": "Required permission: sensors_action_mapping_read. ",
        "operationId": "getSensorActionMapping",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sensorId",
            "in": "path",
            "description": "Identifier of the sensor.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Set a sensor's action mapping.",
        "description": "Required permission: sensors_action_mapping_write. ",
        "operationId": "setSensorActionMapping",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sensorId",
            "in": "path",
            "description": "Identifier of the sensor.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Desired action mapping.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MappingConfig"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/sensors/{sensorId}/action-mappings/options": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get possible sensor's action mappings.",
        "description": "Required permission: sensors_action_mapping_options_read. ",
        "operationId": "getSensorActionMappingOptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sensorId",
            "in": "path",
            "description": "Identifier of the sensor.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/hardware/{hardwareId}/deactivate": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Deactivate an hardware.",
        "description": "Required permission: hardwares_activated_write. ",
        "operationId": "deactivateHardware",
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "hardwareId",
            "in": "path",
            "description": "Identifier of the hardware.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/sensors/{sensorId}/state": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get a sensor's state.",
        "description": "Required permission: sensors_data_current_read. ",
        "operationId": "getSensorState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sensorId",
            "in": "path",
            "description": "Identifier of the sensor.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Set a sensor's state.",
        "description": "Required permission: sensors_data_current_write. ",
        "operationId": "setSensorState",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sensorId",
            "in": "path",
            "description": "Identifier of the sensor.",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/image": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get an intelligent-thing's image.",
        "description": "Required permission: intelligent_things_image_read. If the intelligent-thing defines a custom image it will be returned. Otherwise the image will be retrieved from quickmove.",
        "operationId": "getImage",
        "produces": [
          "image/*"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Update an intelligent-thing's image.",
        "description": "Required permission: intelligent_things_image_write. ",
        "operationId": "setImage",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The new intelligent-thing's image.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipartFormDataInput"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Delete an intelligent-thing's image.",
        "description": "Required permission: intelligent_things_image_write. ",
        "operationId": "deleteImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/sensors": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get all intelligent-thing's sensors.",
        "description": "Required permission: sensors_read. ",
        "operationId": "getSensors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "query",
            "description": "Filter on the inteligent-things's zones.",
            "required": false,
            "type": "string"
          },
          {
            "name": "factorsFilter",
            "in": "query",
            "description": "list of factor types separated with ',' (ex : \"TMP,HUM\" )",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/intelligent-things/{itId}/sensors": {
      "get": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Get sensors of an intelligent-things.",
        "description": "Required permission: sensors_read. ",
        "operationId": "getSensors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itId",
            "in": "path",
            "description": "Identifier of the intelligent-thing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SensorClient"
              }
            }
          }
        }
      }
    },
    "/intelligent-things/multiple-add": {
      "post": {
        "tags": [
          "intelligent-things"
        ],
        "summary": "Add a batch of intelligent-things",
        "description": "Required permission: intelligent_things_create. ",
        "operationId": "addBatchObjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Intelligent-things to add.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ITInformation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/learning/prediction": {
      "get": {
        "tags": [
          "learning"
        ],
        "summary": "Get the prediction for chosen parameters",
        "description": "Required permission: predictions_read. ",
        "operationId": "getPrediction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataSourceNature",
            "in": "query",
            "description": "The predicted dataSourceNature (ex. EXTERNAL_INFO)",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataSourceGroup",
            "in": "query",
            "description": "The predicted dataSourceGroup (ex. TEMPERATURE)",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataSourceID",
            "in": "query",
            "description": "The predicted dataSourceID ",
            "required": true,
            "type": "string"
          },
          {
            "name": "customPersistenceId",
            "in": "query",
            "description": "The predicted customPersistenceId ",
            "required": true,
            "type": "string"
          },
          {
            "name": "zone",
            "in": "query",
            "description": "The predicted zone (ex. Kitchen)",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Begin Date of predicted period",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "periodeDur",
            "in": "query",
            "description": "Instance Periode duration (ChronoUnit : MINUTES,HOURS,DAYS,WEEKS,MONTHS,YEARS)",
            "required": true,
            "type": "string"
          },
          {
            "name": "subDur",
            "in": "query",
            "description": "subdivision duration (ChronoUnit : MINUTES,HOURS,DAYS,WEEKS,MONTHS)",
            "required": true,
            "type": "string"
          },
          {
            "name": "classificationDataStartDate",
            "in": "query",
            "description": "Begin classification data date (default: null)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "diff",
            "in": "query",
            "description": "Differentiel option (default: false)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "dblClassification",
            "in": "query",
            "description": "Double classification option (default: false)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "summary",
            "in": "query",
            "description": "get only result values over period (default: false)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnergyData"
            }
          },
          "422": {
            "description": "Wrong parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "404": {
            "description": "No prediction available for parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "learning"
        ],
        "summary": "Get a group of predictions for a group of chosen parameters",
        "description": "Required permission: predictions_read. ",
        "operationId": "getPredictionDataAll",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of PredictionRequest objets (json)",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PredictionRequest"
              }
            }
          },
          {
            "name": "summary",
            "in": "query",
            "description": "get only result values over period (default: false)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ObsPredData"
              }
            }
          },
          "422": {
            "description": "Wrong parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "404": {
            "description": "No prediction available for parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/learning/agenda": {
      "post": {
        "tags": [
          "learning"
        ],
        "summary": "Get the most probable agenda for the week at the given date",
        "description": "Required permission: predictions_read. ",
        "operationId": "getMostProbableAgenda",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Thresholds of predicted occupancy and targets",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "date of predicted week",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "zone",
            "in": "query",
            "description": "zone",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Agenda"
            }
          },
          "422": {
            "description": "Wrong parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/list": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get a list of selected environmental factor values, sorted per zone",
        "description": "Required permission: factors_data_current_read. ",
        "operationId": "list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorsFilter",
            "in": "query",
            "description": "list of factor types separated with ',' (ex : \"TMP,HUM\" )",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvFactValueZoneClient"
              }
            }
          }
        }
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/{zoneId}/settings/{factorId}": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get the settings of a selected environmental factor",
        "description": "Required permission: factors_settings_read. It concerns factors that are available for settings (ex. BRI, TMP)",
        "operationId": "getFactorSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "zone ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "factor type (ex. TMP)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FactorSetting"
            }
          }
        }
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/weather": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get last weather information",
        "description": "Required permission: weather_current_read. Deprecated : use API /zones/weather instead",
        "operationId": "weather",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WeatherClient"
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/getDayHistoricOfMonth": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get the per-day historic data of a selected month",
        "description": "Required permission: factors_data_history_read. Deprecated : use API /data instead",
        "operationId": "getDayHistoricOfMonth",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "query",
            "description": "The factor's ID (ex. 'TMP for temperature')",
            "required": true,
            "type": "string"
          },
          {
            "name": "zoneId",
            "in": "query",
            "description": "The zone's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Date of the selected day : year",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "month",
            "in": "query",
            "description": "Date of the selected day : month of year (from 1:jan to 12:dec)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "dayHistoricRule",
            "in": "query",
            "description": "Data synthesis rule",
            "required": true,
            "type": "string",
            "enum": [
              "MINIMUM",
              "MAXIMUM",
              "AVERAGE",
              "OCCURRENCE_NB",
              "BASIC",
              "NONE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/ValueDate"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/getMonthHistoricOfYearV2": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get the per-month historic data of a selected year.",
        "description": "Required permission: factors_data_history_read. Deprecated : use API /data instead",
        "operationId": "getMonthHistoricOfYearV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorIds",
            "in": "query",
            "description": "Comma separated list of factors identifiers.",
            "required": true,
            "type": "string"
          },
          {
            "name": "zoneIds",
            "in": "query",
            "description": "Comma separated list of zone identifiers.",
            "required": false,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year for the historic period.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "monthHistoricRule",
            "in": "query",
            "description": "Factor aggreagtion rule.",
            "required": true,
            "type": "string",
            "enum": [
              "MINIMUM",
              "MAXIMUM",
              "AVERAGE",
              "OCCURRENCE_NB",
              "BASIC",
              "NONE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/FactorData"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/getMonthHistoricOfYear": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get the per-month historic data of a selected year.",
        "description": "Required permission: factors_data_history_read. Deprecated : use API /data instead",
        "operationId": "getMonthHistoricOfYear",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "query",
            "description": "The factor's ID (ex. 'TMP for temperature')",
            "required": true,
            "type": "string"
          },
          {
            "name": "zoneId",
            "in": "query",
            "description": "The zone's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Date of the selected day : month of year (from 1:jan to 12:dec)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "monthHistoricRule",
            "in": "query",
            "description": "Data synthesis rule",
            "required": true,
            "type": "string",
            "enum": [
              "MINIMUM",
              "MAXIMUM",
              "AVERAGE",
              "OCCURRENCE_NB",
              "BASIC",
              "NONE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/ValueDate"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/settings": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get all zones factors settings",
        "description": "Required permission: factors_settings_read. ",
        "operationId": "getAllZonesFactorSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "query",
            "description": "Filter on the zone.",
            "required": false,
            "type": "string"
          },
          {
            "name": "factorsFilter",
            "in": "query",
            "description": "list of factor types separated with ',' (ex : \"TMP,HUM\" )",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/getHourHistoricOfDay": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get the per-hour historic data of a selected day",
        "description": "Required permission: factors_data_history_read. Deprecated : use API /data instead",
        "operationId": "getHourHistoricOfDay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "query",
            "description": "The factor's ID (ex. 'TMP for temperature')",
            "required": true,
            "type": "string"
          },
          {
            "name": "zoneId",
            "in": "query",
            "description": "The zone's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Date of the selected day : year",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "month",
            "in": "query",
            "description": "Date of the selected day : month of year (from 1:jan to 12:dec)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "day",
            "in": "query",
            "description": "Date of the selected day : day of month",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "hourHistoricRule",
            "in": "query",
            "description": "Data synthesis rule",
            "required": true,
            "type": "string",
            "enum": [
              "MINIMUM",
              "MAXIMUM",
              "AVERAGE",
              "OCCURRENCE_NB",
              "BASIC",
              "NONE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/ValueDate"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/{zoneId}/{factorId}/actuators": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get a list of actuators that act upon a selected environmental factor",
        "description": "Required permission: actuators_read. ",
        "operationId": "getActuatorsForZoneAndFactor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "zone ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "factor type (ex : TMP)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActuatorClient"
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "404": {
            "description": "Zone not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/{zoneId}/actionning": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get actionning availability for each selected envFactor",
        "description": "Required permission: factors_actions_read. ",
        "operationId": "getActionningEnableByZone",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "zone ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorIds",
            "in": "query",
            "description": "list of factor types separated with ',' (ex : \"TMP,BRI\" )",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "404": {
            "description": "Setting not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/getHourHistoricOfDayV2": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get the per-hour historic data of a selected day",
        "description": "Required permission: factors_data_history_read. Deprecated : use API /data instead",
        "operationId": "getHourHistoricOfDayV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorIds",
            "in": "query",
            "description": "Comma separated list of factors identifiers.",
            "required": true,
            "type": "string"
          },
          {
            "name": "zoneIds",
            "in": "query",
            "description": "Comma separated list of zone identifiers.",
            "required": false,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year for the historic period.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month for the historic period.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "day",
            "in": "query",
            "description": "Day for the historic period.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "hourHistoricRule",
            "in": "query",
            "description": "Factor aggreagtion rule.",
            "required": true,
            "type": "string",
            "enum": [
              "MINIMUM",
              "MAXIMUM",
              "AVERAGE",
              "OCCURRENCE_NB",
              "BASIC",
              "NONE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/FactorData"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/getDayHistoricOfMonthV2": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get the per-day historic data of a selected month",
        "description": "Required permission: factors_data_history_read. Deprecated : use API /data instead",
        "operationId": "getDayHistoricOfMonthV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorIds",
            "in": "query",
            "description": "Comma separated list of factors identifiers.",
            "required": true,
            "type": "string"
          },
          {
            "name": "zoneIds",
            "in": "query",
            "description": "Comma separated list of zone identifiers.",
            "required": false,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year for the historic period.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month for the historic period.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "dayHistoricRule",
            "in": "query",
            "description": "Factor aggreagtion rule.",
            "required": true,
            "type": "string",
            "enum": [
              "MINIMUM",
              "MAXIMUM",
              "AVERAGE",
              "OCCURRENCE_NB",
              "BASIC",
              "NONE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/FactorData"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/{zoneId}/settings": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get the settings of all environmental factors",
        "description": "Required permission: factors_settings_read. It concerns factors that are available for settings (ex. BRI, TMP)",
        "operationId": "getAllFactorSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "zone ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/FactorSetting"
              }
            }
          }
        }
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/{zoneId}/actions": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get information about available actions for each selected envFactor",
        "description": "Required permission: factors_actions_read. ",
        "operationId": "getActionsEnableByZone",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "zone ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorIds",
            "in": "query",
            "description": "list of factor types separated with ',' (ex : \"TMP,BRI\" )",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionningStatus"
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "404": {
            "description": "Setting not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/real-time": {
      "get": {
        "tags": [
          "factors"
        ],
        "summary": "Get the realtime historic data between two dates",
        "description": "Required permission: factors_data_history_read. Deprecated : use API /data instead",
        "operationId": "getRealTimeHistoric",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "query",
            "description": "The factor's ID (ex. 'TMP for temperature')",
            "required": true,
            "type": "string"
          },
          {
            "name": "zoneId",
            "in": "query",
            "description": "The zone's ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "begin",
            "in": "query",
            "description": "begin date (default : 1 h before current date)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "end date (default : current date)",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/ValueDate"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ReactiveEnvironmentDataManagement/{zoneId}/settings/{factorId}/value": {
      "put": {
        "tags": [
          "factors"
        ],
        "summary": "Set the value of an envFactor setting",
        "description": "Required permission: factors_settings_write. ",
        "operationId": "setTargetValue",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "zone ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "path",
            "description": "factor type (ex. TMP)",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "description": "the value to set",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "404": {
            "description": "Setting not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid field value",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/energy/goal": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get the annual consumption scenario for a selected factor",
        "description": "Required permission: consumption_goals_read. ",
        "operationId": "getGoal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "query",
            "description": "The selected environmental factor (ex. CPOW)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConsumptionGoalInfo"
            }
          },
          "404": {
            "description": "Selected scenario not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "scenario"
        ],
        "summary": "Add a new annual consumption scenario",
        "description": "Required permission: consumption_goals_create. ",
        "operationId": "addGoal",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "Year of goal being added.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Description of the consumption scenario",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsumptionGoalInfo"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No data availaible for this factor",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid Parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "scenario"
        ],
        "summary": "Remove the annual consumption scenario for a selected factor",
        "description": "Required permission: consumption_goals_delete. ",
        "operationId": "removeGoal",
        "parameters": [
          {
            "name": "factorId",
            "in": "query",
            "description": "The ID of the factor (ex. CPOW)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Scenario not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/energy": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get a prediction data summary for all predicted factor, for a selected granularity",
        "description": "Required permission: consumption_goals_read. ",
        "operationId": "getPredictionDataAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "granularity",
            "in": "query",
            "description": "The selected granularity (among : DAY, WEEK, MONTH, YEAR)",
            "required": true,
            "type": "string"
          },
          {
            "name": "ct",
            "in": "query",
            "description": "A specific date (default : for current period)",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnergyData"
              }
            }
          },
          "404": {
            "description": "Prediction scenario not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid Parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/goals": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get a prediction data summary for all predicted factor, for a selected granularity",
        "description": "Required permission: consumption_goals_read. [Deprecated : use /WS_ScenarioManagement/energy]",
        "operationId": "getPredictionDataAll_Old",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "granularity",
            "in": "query",
            "description": "The selected granularity (among : DAY, WEEK, MONTH, YEAR)",
            "required": true,
            "type": "string"
          },
          {
            "name": "ct",
            "in": "query",
            "description": "A specific date (default : for current period)",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnergyData"
              }
            }
          },
          "404": {
            "description": "Prediction scenario not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid Parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ScenarioManagement/objectiveType": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Return the Objective Type applied on this factor (OT_AUTO / OT_ON / OT_OFF / OT_FORCED / OT_NONE)",
        "description": "Required permission: factors_objective_type_read. ",
        "operationId": "getCurrentObjectiveTypeForEF",
        "parameters": [
          {
            "name": "zoneId",
            "in": "query",
            "description": "The ID the selected zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "query",
            "description": "The selected factor type (ex. TMP)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "No current scenario activated",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/energy/{factorId}": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get a prediction data summary for a selected factor, for a selected granularity",
        "description": "Required permission: consumption_goals_read. ",
        "operationId": "getPredictionData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "path",
            "description": "The selected factor ID (ex. CPOW)",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "The selected granularity (among : DAY, WEEK, MONTH, YEAR)",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "The begin date of the selected period",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnergyData"
            }
          },
          "404": {
            "description": "Prediction scenario not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid Parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/goal/{factorId}/histo": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get the 'n' last predictions historic data for a selected factor, a selected granularity",
        "description": "Required permission: consumption_goals_data_history_read. [Deprecated : use /WS_ScenarioManagement/energy]",
        "operationId": "getPredictionHistoricData_Old",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "path",
            "description": "The selected environmental factor (ex. CPOW)",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "The selected granularity (among : DAY, WEEK, MONTH, YEAR)",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "current time",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnergyData"
            }
          },
          "422": {
            "description": "Invalid Parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ScenarioManagement/goal/{factorId}/histo/short": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get the 'n' last predictions historic data for a selected factor, a selected granularity",
        "description": "Required permission: consumption_goals_data_history_read. [Deprecated : use /WS_ScenarioManagement/energy]",
        "operationId": "getPredictionHistoricSummary_Old",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "path",
            "description": "The selected environmental factor (ex. CPOW)",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "The selected granularity (among : DAY, WEEK, MONTH, YEAR)",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastn",
            "in": "query",
            "description": "size of historic",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnergyShortHistoric"
            }
          },
          "422": {
            "description": "Invalid Parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ScenarioManagement/energy/{factorId}/histo": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get the 'n' last predictions historic data for a selected factor, a selected granularity",
        "description": "Required permission: consumption_goals_data_history_read. ",
        "operationId": "getPredictionHistoric",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "path",
            "description": "The selected environmental factor (ex. CPOW)",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "The selected granularity (among : DAY, WEEK, MONTH, YEAR)",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastn",
            "in": "query",
            "description": "The number of historic entries to get (default:5)",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnergyDataHistoric"
            }
          },
          "422": {
            "description": "Invalid Parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/goal/availableInfos": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get consumption goal information.",
        "description": "Required permission: consumption_goals_read. Returns if the index of the factor is known for year begin date, as well as last year consumption. [deprecated : use /WS_ScenarioManagement/energy/goal/availableInfos]",
        "operationId": "getAvailableInfos_Old",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "query",
            "description": "Indentifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "description": " current year ",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConsumptionGoalInfo"
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ScenarioManagement/energy/factors": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get all prediction active factors (i.e. there is data for at least one granularity)",
        "description": "Required permission: consumption_goals_read. ",
        "operationId": "getPredictionFactorsList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnergyData"
              }
            }
          },
          "404": {
            "description": "Prediction scenario not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/goal/{factorId}": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get a prediction data summary for a selected factor, for a selected granularity",
        "description": "Required permission: consumption_goals_read. [Deprecated : use /WS_ScenarioManagement/energy]",
        "operationId": "getPredictionData_Old",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "path",
            "description": "The selected factor ID (ex. CPOW)",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "The selected granularity (among : DAY, WEEK, MONTH, YEAR)",
            "required": true,
            "type": "string"
          },
          {
            "name": "ct",
            "in": "query",
            "description": "current time",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "lastn",
            "in": "query",
            "description": "size of historic",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnergyData"
            }
          },
          "404": {
            "description": "Prediction scenario not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid Parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_ScenarioManagement/energy/goal/availableInfos": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get consumption goal information.",
        "description": "Required permission: consumption_goals_read. Returns if the index of the factor is known for year begin date, as well as last year consumption.",
        "operationId": "getAvailableInfos",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "query",
            "description": "Indentifier of the factor",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": " The begin date of the goal to create (default:beginning of current year (if available))",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConsumptionGoalInfo"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/alerts/{alertId}": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get an alert by its id",
        "description": "Required permission: alerts_read. ",
        "operationId": "getAlert",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The ID of the alert to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Alert"
            }
          },
          "404": {
            "description": "Alert not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "scenario"
        ],
        "summary": "Update an alert",
        "description": "Required permission: alerts_update. ",
        "operationId": "updateAlert",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The ID of the alert to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the description of the new alert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Alert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Alert"
            }
          },
          "404": {
            "description": "Alert not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "scenario"
        ],
        "summary": "Remove the selected alert",
        "description": "Required permission: alerts_delete. ",
        "operationId": "deleteAlerte",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The ID of the alert to remove",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Alert not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/alerts/{alertId}/enable": {
      "put": {
        "tags": [
          "scenario"
        ],
        "summary": "Enable/disable an alert specified by its id",
        "description": "Required permission: alerts_enable_write. ",
        "operationId": "setAlertEnable",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The ID of the alert to enable/disable",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "description": "true to enable the alert (false resp.)",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "404": {
            "description": "Alert not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/alerts": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Retrieve all alerts, optionally filtered by zone and/or factor id",
        "description": "Required permission: alerts_read. ",
        "operationId": "getAlerts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "query",
            "description": "The selected zone's ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "query",
            "description": "The selected environmental factor",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Alert"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "scenario"
        ],
        "summary": "Create an alert",
        "description": "Required permission: alerts_create. ",
        "operationId": "addAlert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The description of the alert to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Alert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Alert"
            }
          },
          "422": {
            "description": "Invalid Parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_ScenarioManagement/goal": {
      "get": {
        "tags": [
          "scenario"
        ],
        "summary": "Get the annual consumption scenario for a selected factor",
        "description": "Required permission: consumption_goals_read. [Deprecated : use /WS_ScenarioManagement/energy/goal]",
        "operationId": "getGoal_Old",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "factorId",
            "in": "query",
            "description": "The selected environmental factor (ex. CPOW)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConsumptionGoalInfo"
            }
          },
          "404": {
            "description": "Selected scenario not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "scenario"
        ],
        "summary": "Add a new annual consumption scenario",
        "description": "Required permission: consumption_goals_create. ",
        "operationId": "addGoal_Old",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "Year of goal being added.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Description of the consumption scenario",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsumptionGoalInfo"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No data availaible for this factor",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Invalid Parameters",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "scenario"
        ],
        "summary": "Remove the annual consumption scenario for a selected factor",
        "description": "Required permission: consumption_goals_delete. [Deprecated : use /WS_ScenarioManagement/energy/goal",
        "operationId": "removeGoal_Old",
        "parameters": [
          {
            "name": "factorId",
            "in": "query",
            "description": "The selected environmental factor (ex. CPOW)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Scenario not found",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        },
        "deprecated": true
      }
    },
    "/WS_SystemManagement/status": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get container status",
        "description": "",
        "operationId": "status",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HemisVersion"
            }
          }
        }
      }
    },
    "/WS_SystemManagement/callbacks/{callbackId}": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get a callback",
        "description": "Required permission: callbacks_read. ",
        "operationId": "getCallback",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "callbackId",
            "in": "path",
            "description": "Identifier of the callback",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CallbackDTO"
            }
          },
          "404": {
            "description": "Invalid callback identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "system"
        ],
        "summary": "Update a callback",
        "description": "Required permission: callbacks_update. ",
        "operationId": "updateCallback",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "callbackId",
            "in": "path",
            "description": "Identifier of the callback",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The updated callback.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CallbackDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CallbackDTO"
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "404": {
            "description": "Invalid callback identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "system"
        ],
        "summary": "Delete a callback",
        "description": "Required permission: callbacks_delete. ",
        "operationId": "unregisterCallback",
        "parameters": [
          {
            "name": "callbackId",
            "in": "path",
            "description": "Identifier of the callback",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Invalid callback identifier.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_SystemManagement/callbacks": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get all callbacks",
        "description": "Required permission: callbacks_read. ",
        "operationId": "getAllCallbacks",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CallbackDTO"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Add a callbacks",
        "description": "Required permission: callbacks_create. ",
        "operationId": "registerCallback",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Callback object to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CallbackDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CallbackDTO"
            }
          },
          "422": {
            "description": "Invalid request parameters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_SystemManagement/batch/export": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Export the current batch",
        "description": "Required permission: containers_kernels_batch_export. ",
        "operationId": "exportBatch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Export configuration.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BatchExportRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_SystemManagement/kernels/{kernelId}/batch": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get the current batch of the HEMIS",
        "description": "Required permission: containers_kernels_batch_read. ",
        "operationId": "getBatch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "kernelId",
            "in": "path",
            "description": "Kernel id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DataBatchOfBuilding"
            }
          }
        }
      }
    },
    "/WS_SystemManagement/environnemental-factor-types": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get environmental factor types",
        "description": "Required permission: factor_types_read. ",
        "operationId": "getEFTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentalFactorType"
              }
            }
          }
        }
      }
    },
    "/WS_SystemManagement/event/{zoneId}": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Inject an event",
        "description": "Required permission: factors_events_write. ",
        "operationId": "injectEvent",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          },
          {
            "name": "event",
            "in": "formData",
            "description": "Event",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_SystemManagement/kernels/{kernelId}/building": {
      "put": {
        "tags": [
          "system"
        ],
        "summary": "Set specific kernel's building address",
        "description": "Required permission: building_description_write. ",
        "operationId": "updateAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "kernelId",
            "in": "path",
            "description": "Kernel id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Address",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildingDescription"
            }
          }
        }
      }
    },
    "/WS_SystemManagement/features": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "List available features",
        "description": "",
        "operationId": "getAvailableFeatures",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/WS_SystemManagement/kernels/{kernelId}/properties": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get the properties of a kernel.",
        "description": "Required permission: containers_kernels_properties_read. ",
        "operationId": "getHemisProperties",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "kernelId",
            "in": "path",
            "description": "Identifier of the kernel.",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_only",
            "in": "query",
            "description": "Set to true to get only properties saved inf file and not all default values.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_empty",
            "in": "query",
            "description": "Set to true to remove empty value properties from the result.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "system"
        ],
        "summary": "Update the properties of a kernel.",
        "description": "Required permission: containers_kernels_properties_write. All the properties of the kernel must be passed as argument. If some required argument are missing a 404 response will be returned. To update only some properties see 'PATCH /properties'.",
        "operationId": "updateHemisProperties",
        "consumes": [
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "kernelId",
            "in": "path",
            "description": "Identifier of the kernel.",
            "required": true,
            "type": "string"
          },
          {
            "name": "force_write_file",
            "in": "query",
            "description": "If some properties are unknow for this hemis version, an error will be returned. This flag can be used to force writting the property to the file system for future migrations.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Complete of the updated kernel properties.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "patch": {
        "tags": [
          "system"
        ],
        "summary": "Update the properties of a kernel.",
        "description": "Required permission: containers_kernels_properties_write. Only specified properties will be updated.",
        "operationId": "patchHemisProperties",
        "consumes": [
          "application/json",
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "kernelId",
            "in": "path",
            "description": "Identifier of the kernel.",
            "required": true,
            "type": "string"
          },
          {
            "name": "force_write_file",
            "in": "query",
            "description": "If some properties are unknow for this hemis version, an error will be returned. This flag can be used to force writting the property to the file system for future migrations.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Kernel properties to update.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_SystemManagement/kernels/{kernelId}/authorization": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Update an existing authorization, create a new one if it doesn't exist yet,  delete an existing one if delete=true",
        "description": "Required permission: containers_authorizations_update. ",
        "operationId": "updateAuthorization",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "kernelId",
            "in": "path",
            "description": "Kernel id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Authorization",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Authorization"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "Is a suppresion",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_SystemManagement/security-config": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get the security config",
        "description": "Required permission: security_config_read. ",
        "operationId": "getSecurityConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildingSecurityConfigExport"
            }
          }
        }
      }
    },
    "/WS_SystemManagement/kernels/{kernelId}/batch/export": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Export the current batch of the HEMIS",
        "description": "Required permission: containers_kernels_batch_export. ",
        "operationId": "exportBatchOfKernel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "kernelId",
            "in": "path",
            "description": "Kernel id",
            "required": true,
            "type": "string"
          },
          {
            "name": "override",
            "in": "query",
            "description": "Override or not",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_SystemManagement/getSystemCurrentTime": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get system current time",
        "description": "",
        "operationId": "getSystemCurrentTime",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_SystemManagement/demo_mode": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Check if Demo mode is ON",
        "description": "Required permission: demo_mode_read. ",
        "operationId": "isDemoMode",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/WS_SystemManagement/kernels/{kernelId}": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get a specific Kernel informations",
        "description": "",
        "operationId": "getKernelInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "kernelId",
            "in": "path",
            "description": "Kernel id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KernelStatus"
            }
          },
          "404": {
            "description": "Kernel does not exist"
          }
        }
      }
    },
    "/WS_SystemManagement/broker/login": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Authenticate a broker login request",
        "description": "",
        "operationId": "brokerLogin",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "Email",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Password",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_SystemManagement/getHemisLockStatus": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get system's lock status.",
        "description": "Required permission: lock_status_read. ",
        "operationId": "getLockStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_SystemManagement/kernels": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get all Kernel informations",
        "description": "",
        "operationId": "getAllKernelInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KernelStatus"
              }
            }
          }
        }
      }
    },
    "/WS_SystemManagement/installation-config": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get installer todo list",
        "description": "Required permission: install_config_read. ",
        "operationId": "getInstallConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublicData"
            }
          }
        }
      }
    },
    "/WS_SystemManagement/setHemisLockStatus": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "set system's lock status.",
        "description": "Required permission: lock_status_write. ",
        "operationId": "setLockStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The updated lock status.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HemisLockStatus"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/WS_SystemManagement/infos": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Returns kernel infos, like last modified structure date",
        "description": "Required permission: kernel_infos_read. ",
        "operationId": "getMyKernelInfos",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KernelStatus"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Retrieve all tags known",
        "description": "Required permission: tags_read. ",
        "operationId": "list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "targetType",
            "in": "query",
            "description": "Tag type",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetId",
            "in": "query",
            "description": "Tag id",
            "required": true,
            "type": "string"
          },
          {
            "name": "modifiable",
            "in": "query",
            "description": "The tag is modifiable or not",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tags"
        ],
        "summary": "Add a tag",
        "description": "Required permission: tags_create. ",
        "operationId": "add",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Tag data input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipartFormDataInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          }
        }
      }
    },
    "/tags/{tagId}": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Find a tag by id",
        "description": "Required permission: tags_read. ",
        "operationId": "get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          }
        }
      },
      "put": {
        "tags": [
          "tags"
        ],
        "summary": "Add a tag",
        "description": "Required permission: tags_create. ",
        "operationId": "update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Tag data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          }
        }
      },
      "delete": {
        "tags": [
          "tags"
        ],
        "summary": "Remove a tag",
        "description": "Required permission: tags_delete. ",
        "operationId": "remove",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          },
          "204": {
            "description": "The requested Object was not found Tag"
          },
          "404": {
            "description": "The requested Object was not found Tag"
          },
          "422": {
            "description": "Not allowed null value of object received Tag"
          }
        }
      }
    },
    "/tags/{tagId}/target": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get the data of a tag",
        "description": "Required permission: tags_read. ",
        "operationId": "getTagResponse",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TagResponse"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Tag"
          }
        }
      }
    },
    "/tags/{tagId}/image": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get a tag image",
        "description": "Required permission: tags_image_read. ",
        "operationId": "getTagImage",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag id",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "date of the last get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "file"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Tag"
          }
        }
      },
      "put": {
        "tags": [
          "tags"
        ],
        "summary": "Update the image of a tag",
        "description": "Required permission: tags_image_write. ",
        "operationId": "updateTagImage",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Tag data input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipartFormDataInput"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Tag"
          }
        }
      },
      "delete": {
        "tags": [
          "tags"
        ],
        "summary": "Delete the image of a tag",
        "description": "Required permission: tags_image_write. ",
        "operationId": "deleteImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Tag id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Tag"
          }
        }
      }
    },
    "/tarifications/{id}": {
      "get": {
        "tags": [
          "tarifications"
        ],
        "summary": "Get a target tarification by its ID",
        "description": "Required permission: tarifications_read. ",
        "operationId": "getTarification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the tarification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tarification"
            }
          },
          "404": {
            "description": "No tarification for this ID",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "tarifications"
        ],
        "summary": "Update an already existing Tarification",
        "description": "Required permission: tarifications_update. ",
        "operationId": "updateTarification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the tarification",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Description object (json) of the tarification",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tarification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tarification"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "404": {
            "description": "No tarification for this ID",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Wrong parameters (forbidden null values)",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tarifications"
        ],
        "summary": "Remove a Tarification",
        "description": "Required permission: tarifications_delete. ",
        "operationId": "removeTarification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the tarification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "404": {
            "description": "No tarification for this ID",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/tarifications": {
      "get": {
        "tags": [
          "tarifications"
        ],
        "summary": "Get all the tarifications. Apply filters on : factor/zone, actual/virtual, period of time, current.",
        "description": "Required permission: tarifications_read. if no filters are specified, it returns all tarifications - Zone/Factor must be used together - begin/end must be used together - if current is true, begin/end make no sense - begin/end only make sense with actual tarification, avoid using it with actual=false - begin/end/current filters can only be used if the zone/factor filter is specified.",
        "operationId": "getTarifications",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "query",
            "description": "The selected zone ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "factorId",
            "in": "query",
            "description": "The selected environmental factor type (ex. CPOW)",
            "required": true,
            "type": "string"
          },
          {
            "name": "getActual",
            "in": "query",
            "description": "true to get applicable tarifications (default: true)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "getVirtual",
            "in": "query",
            "description": "true to get virtual tarifications (default: false)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "getCurrent",
            "in": "query",
            "description": "true to get currently applicable tarifications (default: false)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "begin",
            "in": "query",
            "description": "the period begin date",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "the period end date",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tarification"
              }
            }
          },
          "404": {
            "description": "No tarification found for selected filters.",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          },
          "422": {
            "description": "Not enable use of filters : reason",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "tarifications"
        ],
        "summary": "Add a new Tarification",
        "description": "Required permission: tarifications_create. ",
        "operationId": "addTarification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Description object (json) of the tarification",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tarification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tarification"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/WebServiceError"
            }
          }
        }
      }
    },
    "/WS_UserManagement/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Login",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "Email",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Password",
            "required": true,
            "type": "string"
          },
          {
            "name": "kernelId",
            "in": "formData",
            "description": "Kernel ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeFeatures",
            "in": "query",
            "description": "include available features in the response body.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Tag"
          },
          "401": {
            "description": "Unauthorized User"
          }
        }
      }
    },
    "/anomalies": {
      "get": {
        "tags": [
          "anomalies"
        ],
        "summary": "Retrieve activated anomalies",
        "description": "Required permission: alerts_read. ",
        "operationId": "listActivatedAnomalies",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Anomaly"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "anomalies"
        ],
        "summary": "Send one test anomaly to Whistler",
        "description": "Required permission: alerts_read. ",
        "operationId": "testAlertSend",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/zones": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Retrieve all zones",
        "description": "Required permission: zones_read. ",
        "operationId": "list_5",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ignore_restrictions",
            "in": "query",
            "description": "Indicates if we have to apply zones restriction filters on result",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZoneInformation"
              }
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Zone"
          }
        }
      },
      "post": {
        "tags": [
          "zones"
        ],
        "summary": "Add a zone",
        "description": "Required permission: zones_create. ",
        "operationId": "add_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Zone data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZoneInformation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZoneInformation"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Zone"
          },
          "422": {
            "description": "Not allowed null value of object received Zone"
          }
        }
      }
    },
    "/zones/{zoneId}": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get a zone by its id",
        "description": "Required permission: zones_read. ",
        "operationId": "find_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZoneInformation"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Zone"
          }
        }
      },
      "put": {
        "tags": [
          "zones"
        ],
        "summary": "Update a zone",
        "description": "Required permission: zones_update. ",
        "operationId": "update_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Zone data input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZoneInformation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZoneInformation"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Zone"
          },
          "422": {
            "description": "Not allowed null value of object received Zone"
          }
        }
      },
      "delete": {
        "tags": [
          "zones"
        ],
        "summary": "Remove a zone by its id",
        "description": "Required permission: zones_delete. ",
        "operationId": "remove_3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Zone"
          },
          "422": {
            "description": "Not allowed null value of object received Zone"
          }
        }
      }
    },
    "/zones/{zoneId}/links": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get zone links.",
        "description": "Required permission: zones_links_read. ",
        "operationId": "getZoneLinks_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZoneLink"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "zones"
        ],
        "summary": "Create a zone link.",
        "description": "Required permission: zones_links_create. ",
        "operationId": "addZoneLink_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Zone link to add.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZoneLink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZoneLink"
            }
          }
        }
      }
    },
    "/zones/{zoneId}/links/{linkId}": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get a zone link by it's id.",
        "description": "Required permission: zones_links_read. ",
        "operationId": "getZoneLink_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "Link id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZoneLink"
            }
          }
        }
      },
      "put": {
        "tags": [
          "zones"
        ],
        "summary": "Update a zone link.",
        "description": "Required permission: zones_links_update. ",
        "operationId": "updateZoneLink_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Zone link to add.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZoneLink"
            }
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "Link id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZoneLink"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "zones"
        ],
        "summary": "Delete a zone link.",
        "description": "Required permission: zones_links_delete. ",
        "operationId": "deleteZoneLink_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "Link id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/zones/{zoneId}/image": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get zone's image",
        "description": "Required permission: zones_image_read. ",
        "operationId": "getImage_1",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "date of the last get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "file"
            }
          },
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Zone"
          },
          "422": {
            "description": "Not allowed null value of object received Zone"
          }
        }
      },
      "put": {
        "tags": [
          "zones"
        ],
        "summary": "Set zone's image",
        "description": "Required permission: zones_image_write. ",
        "operationId": "setImage_1",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Zone data input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipartFormDataInput"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Zone"
          },
          "422": {
            "description": "Not allowed null value of object received Zone"
          }
        }
      },
      "delete": {
        "tags": [
          "zones"
        ],
        "summary": "Set zone's image",
        "description": "Required permission: zones_image_write. ",
        "operationId": "deleteImage_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Zone"
          },
          "422": {
            "description": "Not allowed null value of object received Zone"
          }
        }
      }
    },
    "/zones/weather/full": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get the full weather information used by Hemis (past, currrent & forecast).",
        "description": "",
        "operationId": "getFullWeatherInfo_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullWeatherInformation"
            }
          }
        }
      }
    },
    "/zones/weather/history": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get the weather history information used by Hemis.",
        "description": "Required permission: weather_history_read. ",
        "operationId": "getWeatherHistoryInfo_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WeatherHistoricInformation"
            }
          }
        }
      }
    },
    "/zones/{zoneId}/learnedTmpInertia": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get zone's learned temperature inertia",
        "description": "Required permission: factors_inertia_read. ",
        "operationId": "getLearnedTmpInertia_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "Zone id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Error while performing internal operation"
          },
          "404": {
            "description": "The requested Object was not found Zone"
          }
        }
      }
    },
    "/zones/weatherForecast/accurate": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get the weather forecast (5 days, one value each 3 hours)",
        "description": "Required permission: weather_accurate_forecast_read. ",
        "operationId": "getAccurateWeatherForecastInfo_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WeatherForecastInformationAccurate"
            }
          }
        }
      }
    },
    "/zones/weatherForecast": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get the weather forecast (16 days, one value each days)",
        "description": "Required permission: weather_forecast_read. ",
        "operationId": "getWeatherForecastInfo_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WeatherForecastInformation"
            }
          }
        }
      }
    },
    "/zones/weather": {
      "get": {
        "tags": [
          "zones"
        ],
        "summary": "Get the weather information used by Hemis.",
        "description": "Required permission: weather_current_read. ",
        "operationId": "getWeatherInfo_1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WeatherInformation"
            }
          }
        }
      }
    },
    "/WS_ConnectorLinkManagement": {
      "get": {
        "tags": [
          "connector link"
        ],
        "summary": "Get link list",
        "description": "Required permission: connectors_links_read. ",
        "operationId": "getLinkList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Link"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "connector link"
        ],
        "summary": "Create a new link between connectors",
        "description": "Required permission: connectors_links_create. ",
        "operationId": "createLink",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sItId",
            "in": "formData",
            "description": "id of the slave it",
            "required": true,
            "type": "string"
          },
          {
            "name": "sCTypeId",
            "in": "formData",
            "description": "type id of the slave connector",
            "required": true,
            "type": "string"
          },
          {
            "name": "mItId",
            "in": "formData",
            "description": "id of the master it",
            "required": true,
            "type": "string"
          },
          {
            "name": "mCTypeId",
            "in": "formData",
            "description": "type id of the master connector",
            "required": true,
            "type": "string"
          },
          {
            "name": "rep",
            "in": "formData",
            "description": "representation code of the link",
            "required": true,
            "type": "string"
          },
          {
            "name": "ref",
            "in": "formData",
            "description": "reference of the link",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        }
      }
    },
    "/WS_ConnectorLinkManagement/{linkId}": {
      "delete": {
        "tags": [
          "connector link"
        ],
        "summary": "Delete a link by his id or reference",
        "description": "Required permission: connectors_links_delete. ",
        "operationId": "deleteLink",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "linkId",
            "in": "path",
            "description": "Link id or reference",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "definitions": {
    "WebServiceError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "cause": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebServiceError"
          }
        },
        "error_id": {
          "type": "string",
          "enum": [
            "NOT_FOUND",
            "INVALID_ACCEPT_HEADER",
            "METHOD_NOT_ALLOWED",
            "UNSUPPORTED_MEDIA_TYPE",
            "INTERNAL_ERROR",
            "MULTIPLE_ERRORS",
            "ENTITY_ALREADY_EXISTS",
            "ENTITY_NOT_FOUND",
            "EMPTY_OBJECT",
            "INVALID_CREDENTIALS",
            "UNAUTHORIZED",
            "FORBIDDEN",
            "NOT_STARTED",
            "UNSUPPORTED_ACTION",
            "NULL_FIELD",
            "INVALID_FIELD",
            "INVALID_FIELDS",
            "INVALID_OBJECT",
            "DEPRECATED",
            "SERVICE_UNAVAILABLE",
            "INVALID_ENDPOINT_SYNTAX",
            "ENTITY_ALREADY_USED"
          ]
        },
        "target": {
          "type": "string"
        }
      }
    },
    "AccountClient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "accountType": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "accountState": {
          "type": "string"
        },
        "accountOptionalFields": {
          "$ref": "#/definitions/AccountOptionalFields"
        }
      }
    },
    "AccountOptionalField": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "AccountOptionalFields": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountOptionalField"
          }
        },
        "site_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountOptionalField"
          }
        }
      }
    },
    "ITClientAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "zone": {
          "$ref": "#/definitions/ZoneClient"
        },
        "type": {
          "$ref": "#/definitions/ItTypeClient"
        },
        "suppressed": {
          "type": "boolean"
        },
        "locked": {
          "type": "boolean"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "ItTypeClient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "typeName": {
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "ZoneClient": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "parentId": {
          "type": "string"
        },
        "metazone": {
          "type": "boolean"
        },
        "hasImage": {
          "type": "boolean"
        },
        "floor": {
          "type": "integer",
          "format": "int32"
        },
        "external": {
          "type": "boolean"
        },
        "surface": {
          "type": "string"
        }
      }
    },
    "AgendaClientBase": {
      "type": "object",
      "properties": {
        "factorId": {
          "$ref": "#/definitions/EnvironmentalFactorId"
        },
        "targetValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TargetValue"
          }
        },
        "days": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AgendaDay"
          }
        },
        "overrides": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/OverrideClientBase"
          }
        },
        "activated": {
          "type": "boolean"
        },
        "representationData": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Description"
          }
        }
      }
    },
    "AgendaDay": {
      "type": "object",
      "properties": {
        "intervals": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TimeIntervalConsign"
          }
        }
      }
    },
    "Description": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "registrationDate": {
          "type": "integer",
          "format": "int64"
        },
        "lastModificationDate": {
          "type": "integer",
          "format": "int64"
        },
        "modifiable": {
          "type": "boolean"
        },
        "available": {
          "type": "boolean"
        },
        "information": {
          "type": "string"
        },
        "log": {
          "type": "string"
        },
        "transferable": {
          "type": "boolean"
        }
      }
    },
    "EnvironmentalFactorId": {
      "type": "object",
      "properties": {
        "factor": {
          "type": "string"
        },
        "zoneName": {
          "type": "string"
        }
      }
    },
    "OverrideClientBase": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "intervals": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TimeIntervalConsign"
          }
        },
        "temporalDefinition": {
          "$ref": "#/definitions/TemporalDefinitionClient"
        }
      }
    },
    "StartEndClient": {
      "allOf": [
        {
          "$ref": "#/definitions/TemporalDefinitionClient"
        },
        {
          "type": "object",
          "properties": {
            "startDate": {
              "type": "string"
            },
            "endDate": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TargetValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "type": {
          "type": "string",
          "enum": [
            "AUTO",
            "STATE"
          ]
        },
        "minValue": {
          "type": "number",
          "format": "double"
        },
        "maxValue": {
          "type": "number",
          "format": "double"
        },
        "orientation": {
          "type": "string",
          "enum": [
            "AUTO",
            "DROP",
            "RISE"
          ]
        }
      }
    },
    "TemporalDefinitionClient": {
      "type": "object",
      "discriminator": "type"
    },
    "TimeIntervalConsign": {
      "type": "object",
      "properties": {
        "timeStart": {
          "type": "integer",
          "format": "int32"
        },
        "timeEnd": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "$ref": "#/definitions/TargetValue"
        }
      }
    },
    "AgendaOverride": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "intervals": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/TimeIntervalConsign"
          }
        },
        "temporalDefinition": {
          "$ref": "#/definitions/TemporalDefinition"
        }
      }
    },
    "OverrideConflict": {
      "type": "object",
      "properties": {
        "override": {
          "$ref": "#/definitions/AgendaOverride"
        },
        "day": {
          "type": "string"
        },
        "timeStart": {
          "type": "integer",
          "format": "int32"
        },
        "timeEnd": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TemporalDefinition": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ActuatorState": {
      "type": "object",
      "properties": {
        "itId": {
          "type": "string"
        },
        "actuatorId": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "timeStamp": {
          "type": "integer",
          "format": "int64"
        },
        "progressive": {
          "type": "boolean"
        },
        "colorEnable": {
          "type": "boolean"
        },
        "color": {
          "type": "string"
        },
        "hsvColor": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "hue": {
          "type": "number",
          "format": "double"
        },
        "saturation": {
          "type": "number",
          "format": "double"
        },
        "ctEnable": {
          "type": "boolean"
        },
        "ct": {
          "type": "number",
          "format": "double"
        },
        "minActionValue": {
          "type": "number",
          "format": "double"
        },
        "maxActionValue": {
          "type": "number",
          "format": "double"
        },
        "remote": {
          "type": "boolean"
        },
        "direct": {
          "type": "boolean"
        },
        "transitionDuration": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AmbianceDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AmbianceValueDTO"
          }
        }
      }
    },
    "AmbianceValueDTO": {
      "type": "object",
      "properties": {
        "factorId": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        },
        "factorValue": {
          "type": "number",
          "format": "double"
        },
        "actuatorStates": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ActuatorState"
          }
        }
      }
    },
    "SelectedAmbianceDTO": {
      "type": "object",
      "properties": {
        "zoneId": {
          "type": "string"
        },
        "factorId": {
          "type": "string"
        },
        "ambianceId": {
          "type": "string"
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "representation": {
          "type": "string"
        },
        "masterCTypeId": {
          "type": "string"
        },
        "masterCTypeGroupName": {
          "type": "string"
        },
        "masterCTypeGroupId": {
          "type": "string"
        },
        "masterItId": {
          "type": "string"
        },
        "slaveCTypeId": {
          "type": "string"
        },
        "slaveCTypeGroupName": {
          "type": "string"
        },
        "slaveCTypeGroupId": {
          "type": "string"
        },
        "slaveItId": {
          "type": "string"
        }
      }
    },
    "DataPersistenceDescription": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "VALUENB",
              "DIFF",
              "MINIMUM",
              "MAXIMUM",
              "AVERAGE",
              "SUM",
              "VALUESTR",
              "MAXIMUMOCC",
              "LASTOCC",
              "RELIABILITY",
              "NBPOINT"
            ]
          }
        },
        "persistencePolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataPersistencePolicy"
          }
        },
        "intervalCountBeforeAggregation": {
          "type": "integer",
          "format": "int32"
        },
        "aggregationTimes": {
          "type": "integer",
          "format": "int32"
        },
        "isCustom": {
          "type": "boolean"
        }
      }
    },
    "DataPersistencePolicy": {
      "type": "object",
      "properties": {
        "retainDuration": {
          "type": "integer",
          "format": "int64"
        },
        "granularity": {
          "type": "integer",
          "format": "int64"
        },
        "ID": {
          "type": "string"
        }
      }
    },
    "DataSourceType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sourceNature": {
          "type": "string"
        },
        "sourceGroup": {
          "type": "string"
        },
        "customPersistenceId": {
          "type": "string"
        },
        "measurement": {
          "type": "string"
        },
        "sourceGroupUnit": {
          "type": "string"
        },
        "measurementUnit": {
          "type": "string"
        },
        "persistenceDescriptions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataPersistenceDescription"
          }
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "DataContainer": {
      "type": "object",
      "properties": {
        "dataInfo": {
          "$ref": "#/definitions/DataInformation"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimePoint"
          }
        }
      }
    },
    "DataInformation": {
      "type": "object",
      "properties": {
        "sourceTypeInfo": {
          "$ref": "#/definitions/DataSourceTypeInformation"
        },
        "zoneId": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        }
      }
    },
    "DataPeriodQuery": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "VALUENB",
              "DIFF",
              "MINIMUM",
              "MAXIMUM",
              "AVERAGE",
              "SUM",
              "VALUESTR",
              "MAXIMUMOCC",
              "LASTOCC",
              "RELIABILITY",
              "NBPOINT"
            ]
          }
        },
        "measur": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "nature": {
          "type": "string"
        },
        "custpid": {
          "type": "string"
        },
        "dsid": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        },
        "begdate": {
          "type": "integer",
          "format": "int64"
        },
        "enddate": {
          "type": "integer",
          "format": "int64"
        },
        "gran": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "last": {
          "type": "integer",
          "format": "int32"
        },
        "pagingNewBeginDate": {
          "type": "integer",
          "format": "int64"
        },
        "pagingNewEndDate ": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DataProviderAnswer": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "SUCCESS",
            "PARTIAL",
            "FAIL",
            "ERROR"
          ]
        },
        "query": {
          "readOnly": true,
          "$ref": "#/definitions/DataPeriodQuery"
        },
        "results": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/DataContainer"
          }
        },
        "missing": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/DataPeriodQuery"
          }
        },
        "firstDate": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "lastDate": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "pointCount": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "DataSourceTypeInformation": {
      "type": "object",
      "properties": {
        "sourceNature": {
          "type": "string"
        },
        "sourceGroup": {
          "type": "string"
        },
        "customPersistenceId": {
          "type": "string"
        },
        "measurement": {
          "type": "string"
        },
        "measurementUnit": {
          "type": "string"
        }
      }
    },
    "TimePoint": {
      "type": "object",
      "properties": {
        "d": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "v": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "DataSourceTypeOntology": {
      "type": "object",
      "properties": {
        "ontology": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataSourceType"
          }
        },
        "allRetainDurations": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "instantiated": {
          "type": "boolean"
        }
      }
    },
    "DataMeasurementSeries": {
      "type": "object",
      "properties": {
        "measurement": {
          "type": "string"
        },
        "measurementUnit": {
          "type": "string"
        },
        "series": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSeriesInformation"
          }
        }
      }
    },
    "DataSeriesInformation": {
      "type": "object",
      "properties": {
        "nature": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        },
        "sourceID": {
          "type": "string"
        },
        "cpid": {
          "type": "string"
        }
      }
    },
    "GatewayClient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "communicationId": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ItTypeClient"
        },
        "enabled": {
          "type": "boolean"
        },
        "accountState": {
          "type": "string",
          "enum": [
            "OK",
            "UNREACHABLE",
            "UNAUTHORIZED",
            "WAITING",
            "RESCUE"
          ]
        },
        "compositeState": {
          "$ref": "#/definitions/ITCompositeState"
        },
        "locked": {
          "type": "boolean"
        },
        "firmwareVersion": {
          "type": "string"
        },
        "embodiment": {
          "type": "string",
          "enum": [
            "REAL",
            "INTERNAL",
            "VIRTUAL",
            "MATERIALIZED",
            "SIMULATED",
            "ALTERNATIVE",
            "GENERATED_ALTERNATIVE"
          ]
        },
        "operationalProtocols": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "applicationProtocol": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "ITCompositeState": {
      "type": "object",
      "properties": {
        "o": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "OK",
            "PARTIAL",
            "KO",
            "UNKNOWN"
          ]
        },
        "oTs": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "oC": {
          "type": "string",
          "readOnly": true
        },
        "p": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "OK",
            "IN_PROGRES",
            "KO",
            "UNKNOWN",
            "NOT_NEEDED"
          ]
        },
        "pTs": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "pC": {
          "type": "string",
          "readOnly": true
        },
        "r": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "OK",
            "KO",
            "RESCUE",
            "UNKNOWN"
          ]
        },
        "rTs": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "rC": {
          "type": "string",
          "readOnly": true
        },
        "oD": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/StateData"
          }
        },
        "pD": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/StateData"
          }
        },
        "rD": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/StateData"
          }
        }
      }
    },
    "StateData": {
      "type": "object",
      "properties": {
        "c": {
          "type": "string"
        },
        "ts": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ConnectorInformation": {
      "type": "object",
      "properties": {
        "itId": {
          "type": "string"
        },
        "typeId": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        }
      }
    },
    "Coordinates": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "z": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "HardwareCustomization": {
      "type": "object",
      "properties": {
        "hardwareTypeID": {
          "type": "string"
        },
        "descriptions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Description"
          }
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "ITInformation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "comID": {
          "type": "string"
        },
        "firmwareVersion": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "creationTimeStamp": {
          "type": "integer",
          "format": "int64"
        },
        "embodiment": {
          "type": "string",
          "enum": [
            "REAL",
            "INTERNAL",
            "VIRTUAL",
            "MATERIALIZED",
            "SIMULATED",
            "ALTERNATIVE",
            "GENERATED_ALTERNATIVE"
          ]
        },
        "name": {
          "type": "string"
        },
        "zoneInformation": {
          "$ref": "#/definitions/ZoneInformation"
        },
        "typeInformation": {
          "$ref": "#/definitions/TypeInformation"
        },
        "correspondingVirtualItID": {
          "type": "string"
        },
        "hardwareCustomizations": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/HardwareCustomization"
          }
        },
        "gateways": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "specifiedGateway": {
          "type": "string"
        },
        "specifiedGatewayEnable": {
          "type": "boolean"
        },
        "accountID": {
          "type": "string"
        },
        "accountState": {
          "type": "string",
          "enum": [
            "OK",
            "UNREACHABLE",
            "UNAUTHORIZED",
            "WAITING",
            "RESCUE"
          ]
        },
        "state": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "OK",
            "UNREACHABLE",
            "ERROR",
            "DOWN",
            "UNSTABLE",
            "POOR_CONNECTION",
            "WAITING",
            "PAIRING",
            "RESCUE",
            "NOT_PAIRED",
            "MUTE",
            "PAIRED"
          ]
        },
        "compositeState": {
          "$ref": "#/definitions/ITCompositeState"
        },
        "rssi": {
          "type": "string",
          "format": "byte"
        },
        "hasImage": {
          "type": "boolean"
        },
        "locked": {
          "type": "boolean"
        },
        "hardwareTypeComIDs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "slots": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ITSlotInformation"
          }
        },
        "connectors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorInformation"
          }
        },
        "groups": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "referentHardwareIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "interconnected": {
          "type": "boolean"
        },
        "operationalProtocols": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      }
    },
    "ITSlotInformation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "itRef": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "locaRef": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "connectors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorInformation"
          }
        }
      }
    },
    "Orientation": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "z": {
          "type": "number",
          "format": "double"
        },
        "w": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Position": {
      "type": "object",
      "properties": {
        "coordinates": {
          "$ref": "#/definitions/Coordinates"
        },
        "orientation": {
          "$ref": "#/definitions/Orientation"
        },
        "scale": {
          "$ref": "#/definitions/Scale"
        },
        "extra": {
          "type": "string"
        }
      }
    },
    "Scale": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "z": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "TypeInformation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "category": {
          "type": "string",
          "enum": [
            "DEFAULT",
            "METER",
            "GATEWAY",
            "TAG",
            "BRIDGE",
            "ALTERNATIVE"
          ]
        },
        "remoteCommissioning": {
          "type": "boolean"
        },
        "useTrigger": {
          "type": "boolean"
        },
        "splittable": {
          "type": "boolean"
        },
        "hasActuators": {
          "type": "boolean"
        },
        "hasSensors": {
          "type": "boolean"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "ENOCEAN",
            "MODBUS",
            "SCHEIBER",
            "WEB_SERVICES",
            "XBEE",
            "ZIGBEE",
            "NONE",
            "AVIDSEN",
            "DALI",
            "IO",
            "OVP",
            "THREAD",
            "ZWAVE",
            "VAILLANT",
            "ELIOT",
            "IR",
            "EIP_MQTT",
            "ARCOM",
            "BLE",
            "BACNET_IP"
          ]
        },
        "applicationProtocol": {
          "type": "string"
        },
        "sensorsFactor": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "actuatorsFactors": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        },
        "targetZone": {
          "type": "string"
        },
        "descriptions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Description"
          }
        },
        "onlySlave": {
          "type": "boolean"
        }
      }
    },
    "ZoneInformation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "parentId": {
          "type": "string"
        },
        "surface": {
          "type": "string"
        },
        "metazone": {
          "type": "boolean"
        },
        "hasImage": {
          "type": "boolean"
        },
        "floor": {
          "type": "integer",
          "format": "int32"
        },
        "external": {
          "type": "boolean"
        }
      }
    },
    "ActuatorsStatesClient": {
      "type": "object",
      "properties": {
        "states": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ActuatorState"
          }
        },
        "grp": {
          "type": "string"
        },
        "itId": {
          "type": "string"
        }
      }
    },
    "ActuatorClient": {
      "type": "object",
      "properties": {
        "actuatorId": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/IActuatorState"
        },
        "hardwareState": {
          "$ref": "#/definitions/IActuatorState"
        },
        "targetState": {
          "$ref": "#/definitions/IActuatorState"
        },
        "actionningRepresentation": {
          "type": "string"
        },
        "itId": {
          "type": "string"
        },
        "factors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "activated": {
          "type": "boolean"
        },
        "external_modification_forbidden": {
          "type": "boolean"
        },
        "com_type": {
          "type": "string",
          "enum": [
            "VOID",
            "ONE_SHOT",
            "REPEAT",
            "ON_DEMAND",
            "ON_REQUEST"
          ]
        },
        "usableByUser": {
          "type": "boolean"
        },
        "sourceId": {
          "type": "string"
        },
        "connectors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorInformation"
          }
        }
      }
    },
    "IActuatorState": {
      "type": "object",
      "discriminator": "type"
    },
    "LuminionOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/IActuatorState"
        },
        {
          "type": "object",
          "properties": {
            "state": {
              "$ref": "#/definitions/LuminionState"
            },
            "duration": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    },
    "LuminionState": {
      "type": "object"
    },
    "ActuatorSourceClient": {
      "type": "object",
      "properties": {
        "sourceId": {
          "type": "string"
        }
      }
    },
    "EnvFactValueClient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "oldValue": {
          "type": "string"
        },
        "evol": {
          "type": "string",
          "enum": [
            "INC",
            "DEC",
            "SAME"
          ]
        },
        "feelingCoef": {
          "type": "number",
          "format": "double"
        },
        "hasAltSensor": {
          "type": "boolean"
        }
      }
    },
    "SensorClient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "itId": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/EnvFactValueClient"
        },
        "offset": {
          "type": "number",
          "format": "double"
        },
        "activated": {
          "type": "boolean"
        },
        "monitoringRepresentation": {
          "type": "string"
        },
        "usableByUser": {
          "type": "boolean"
        },
        "connectors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorInformation"
          }
        }
      }
    },
    "ActuatorsOfIts": {
      "type": "object",
      "properties": {
        "itId": {
          "type": "string"
        },
        "actuatorIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserPref": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "duration": {
          "type": "integer",
          "format": "int64"
        },
        "color": {
          "type": "string"
        },
        "hue": {
          "type": "string"
        },
        "saturation": {
          "type": "string"
        },
        "ct": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "UserPrefMultiSetting": {
      "type": "object",
      "properties": {
        "pref": {
          "$ref": "#/definitions/UserPref"
        },
        "actuators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActuatorsOfIts"
          }
        }
      }
    },
    "MappingAction": {
      "type": "object",
      "discriminator": "type"
    },
    "MappingActionActuatorStates": {
      "allOf": [
        {
          "$ref": "#/definitions/MappingAction"
        },
        {
          "type": "object",
          "properties": {
            "duration": {
              "type": "integer",
              "format": "int64"
            },
            "actuatorStates": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActuatorState"
              }
            }
          }
        }
      ]
    },
    "MappingActionAmbiance": {
      "allOf": [
        {
          "$ref": "#/definitions/MappingAction"
        },
        {
          "type": "object",
          "properties": {
            "zoneId": {
              "type": "string"
            },
            "ambianceId": {
              "type": "string"
            },
            "factors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "MappingActionEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/MappingAction"
        },
        {
          "type": "object",
          "properties": {
            "zoneId": {
              "type": "string"
            },
            "action": {
              "type": "string"
            }
          }
        }
      ]
    },
    "MappingConfig": {
      "type": "object",
      "properties": {
        "evtMappingConf": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MappingAction"
          }
        }
      }
    },
    "InputPart": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "contentTypeFromMessage": {
          "type": "boolean"
        },
        "bodyAsString": {
          "type": "string"
        }
      }
    },
    "MediaType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "subtype": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "wildcardSubtype": {
          "type": "boolean"
        },
        "wildcardType": {
          "type": "boolean"
        }
      }
    },
    "MultipartFormDataInput": {
      "type": "object",
      "properties": {
        "formDataMap": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/InputPart"
            }
          }
        },
        "formData": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InputPart"
          }
        },
        "parts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputPart"
          }
        },
        "preamble": {
          "type": "string"
        }
      }
    },
    "EnergyData": {
      "type": "object",
      "properties": {
        "enFactId": {
          "type": "string"
        },
        "granularity": {
          "type": "string"
        },
        "periodObs": {
          "type": "number",
          "format": "double"
        },
        "periodForecast": {
          "type": "number",
          "format": "double"
        },
        "periodCost": {
          "type": "number",
          "format": "double"
        },
        "forecastCost": {
          "type": "number",
          "format": "double"
        },
        "datas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnergyValueForecast"
          }
        },
        "obj_coefficient": {
          "type": "number",
          "format": "double"
        },
        "begin_index": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "EnergyValueForecast": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "reliability": {
          "type": "number",
          "format": "double"
        },
        "prediction": {
          "type": "number",
          "format": "double"
        },
        "prediction_reliability": {
          "type": "number",
          "format": "double"
        },
        "cost": {
          "type": "number",
          "format": "double"
        },
        "predictionCost": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ObsPredData": {
      "type": "object",
      "properties": {
        "envFactId": {
          "type": "string"
        },
        "granularity": {
          "type": "string"
        },
        "periodMeanObs": {
          "type": "number",
          "format": "double"
        },
        "periodMeanPred": {
          "type": "number",
          "format": "double"
        },
        "periodSumObs": {
          "type": "number",
          "format": "double"
        },
        "periodSumPred": {
          "type": "number",
          "format": "double"
        },
        "periodCost": {
          "type": "number",
          "format": "double"
        },
        "periodPredCost": {
          "type": "number",
          "format": "double"
        },
        "max_value": {
          "type": "number",
          "format": "double"
        },
        "min_value": {
          "type": "number",
          "format": "double"
        },
        "datas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObsPredDataPoint"
          }
        }
      }
    },
    "ObsPredDataPoint": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "observe_value": {
          "type": "number",
          "format": "double"
        },
        "obs_reliability": {
          "type": "number",
          "format": "double"
        },
        "cost": {
          "type": "number",
          "format": "double"
        },
        "prediction_value": {
          "type": "number",
          "format": "double"
        },
        "pred_reliability": {
          "type": "number",
          "format": "double"
        },
        "predCost": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "PredictionRequest": {
      "type": "object",
      "properties": {
        "timeScale": {
          "$ref": "#/definitions/TimeScale"
        },
        "date": {
          "type": "integer",
          "format": "int64"
        },
        "dataSourceNature": {
          "type": "string"
        },
        "dataSourceGroup": {
          "type": "string"
        },
        "dataSourceId": {
          "type": "string"
        },
        "customPersistenceId": {
          "type": "string"
        },
        "diff": {
          "type": "boolean"
        },
        "dblClassification": {
          "type": "boolean"
        },
        "zone": {
          "type": "string"
        },
        "classificationDataStartDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TimeScale": {
      "type": "object",
      "properties": {
        "interval": {
          "$ref": "#/definitions/TimeScalePeriod"
        },
        "subdivision": {
          "$ref": "#/definitions/TimeScalePeriod"
        }
      }
    },
    "TimeScalePeriod": {
      "type": "object",
      "properties": {
        "chronoUnit": {
          "type": "string",
          "enum": [
            "NANOS",
            "MICROS",
            "MILLIS",
            "SECONDS",
            "MINUTES",
            "HOURS",
            "HALF_DAYS",
            "DAYS",
            "WEEKS",
            "MONTHS",
            "YEARS",
            "DECADES",
            "CENTURIES",
            "MILLENNIA",
            "ERAS",
            "FOREVER"
          ]
        },
        "n": {
          "type": "integer",
          "format": "int32"
        },
        "event": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "duration": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Agenda": {
      "type": "object",
      "properties": {
        "factorId": {
          "$ref": "#/definitions/EnvironmentalFactorId"
        },
        "days": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AgendaDay"
          }
        },
        "overrides": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AgendaOverride"
          }
        },
        "representationData": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Description"
          }
        },
        "activated": {
          "type": "boolean"
        }
      }
    },
    "EnvFactValueZoneClient": {
      "type": "object",
      "properties": {
        "zone": {
          "$ref": "#/definitions/ZoneClient"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvFactValueClient"
          }
        }
      }
    },
    "FactorSetting": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "hiddenValue": {
          "type": "number",
          "format": "double"
        },
        "hiddenValueEnd": {
          "type": "integer",
          "format": "int64"
        },
        "unit": {
          "type": "string"
        },
        "actuatorCount": {
          "type": "integer",
          "format": "int32"
        },
        "min": {
          "type": "number",
          "format": "double"
        },
        "max": {
          "type": "number",
          "format": "double"
        },
        "step": {
          "type": "number",
          "format": "double"
        },
        "dateToReachTarget": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "WeatherClient": {
      "type": "object",
      "properties": {
        "humidity": {
          "type": "number",
          "format": "double"
        },
        "pressure": {
          "type": "integer",
          "format": "int64"
        },
        "temperature": {
          "type": "number",
          "format": "double"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "weather_icon": {
          "type": "string"
        },
        "wind_direction": {
          "type": "string"
        },
        "wind_speed": {
          "type": "string"
        }
      }
    },
    "ValueDate": {
      "type": "object",
      "properties": {
        "absoluteDate": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "string"
        },
        "occurenceNumber": {
          "type": "integer",
          "format": "int32"
        },
        "reliability": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "FactorData": {
      "type": "object",
      "properties": {
        "factor": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ValueDate"
          }
        },
        "zone_id": {
          "type": "string"
        }
      }
    },
    "ActionningStatus": {
      "type": "object",
      "properties": {
        "onOffEnable": {
          "type": "boolean"
        },
        "autoEnable": {
          "type": "boolean"
        }
      }
    },
    "ConsumptionGoalInfo": {
      "type": "object",
      "properties": {
        "factor": {
          "type": "string"
        },
        "lastYearConsumption": {
          "type": "number",
          "format": "double"
        },
        "goal": {
          "type": "number",
          "format": "double"
        },
        "percent": {
          "type": "boolean"
        },
        "cost": {
          "type": "boolean"
        },
        "beginDate": {
          "type": "integer",
          "format": "int64"
        },
        "beginIndex": {
          "type": "number",
          "format": "double"
        },
        "currentIndex": {
          "type": "number",
          "format": "double"
        },
        "currentIndexDate": {
          "type": "integer",
          "format": "int64"
        },
        "proposedUpdateDate": {
          "type": "integer",
          "format": "int64"
        },
        "objRemainingPrediction": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "EnergyDataShort": {
      "type": "object",
      "properties": {
        "enFactId": {
          "type": "string"
        },
        "granularity": {
          "type": "string"
        },
        "periodObs": {
          "type": "number",
          "format": "double"
        },
        "periodForecast": {
          "type": "number",
          "format": "double"
        },
        "periodCost": {
          "type": "number",
          "format": "double"
        },
        "forecastCost": {
          "type": "number",
          "format": "double"
        },
        "beginDate": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EnergyShortHistoric": {
      "type": "object",
      "properties": {
        "enFactId": {
          "type": "string"
        },
        "granularity": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnergyDataShort"
          }
        },
        "lastAverageCost": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "EnergyDataHistoric": {
      "type": "object",
      "properties": {
        "enFactId": {
          "type": "string"
        },
        "granularity": {
          "type": "string"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnergyData"
          }
        },
        "lastAverageCost": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Action": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SMS",
            "EMAIL",
            "NOTIFICATION",
            "LUMINION_NOTIFICATION",
            "PUSH_NOTIF"
          ]
        },
        "target": {
          "type": "string"
        }
      }
    },
    "Alert": {
      "type": "object",
      "required": [
        "condition"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "factorId": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        },
        "minTimeBetweenExecution": {
          "type": "integer",
          "format": "int64"
        },
        "condition": {
          "$ref": "#/definitions/Condition"
        },
        "actions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Action"
          }
        }
      }
    },
    "Condition": {
      "type": "object",
      "required": [
        "type",
        "value1"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "GREATER_THAN",
            "LOWER_THAN",
            "IN_INTERVAL",
            "OUT_INTERVAL",
            "EQUALS",
            "CUMUL"
          ]
        },
        "value1": {
          "$ref": "#/definitions/Number"
        },
        "value2": {
          "$ref": "#/definitions/Number"
        }
      }
    },
    "Number": {
      "type": "object"
    },
    "HemisVersion": {
      "type": "object",
      "properties": {
        "hemis_version": {
          "type": "string"
        },
        "git_commit": {
          "type": "string"
        },
        "git_branch": {
          "type": "string"
        }
      }
    },
    "CallbackDTO": {
      "type": "object",
      "required": [
        "name",
        "token",
        "type",
        "url"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "PER_HOUR",
            "REAL_TIME"
          ]
        },
        "token": {
          "type": "string",
          "minLength": 0,
          "maxLength": 2048
        }
      }
    },
    "BatchExportRequest": {
      "type": "object",
      "properties": {
        "storeOld": {
          "type": "boolean"
        },
        "storeNew": {
          "type": "boolean"
        },
        "userData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "batchName": {
          "type": "string"
        }
      }
    },
    "AccountConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "delay": {
          "type": "integer",
          "format": "int64"
        },
        "lastCheck": {
          "type": "integer",
          "format": "int64"
        },
        "state": {
          "type": "string",
          "enum": [
            "OK",
            "UNREACHABLE",
            "UNAUTHORIZED",
            "WAITING",
            "RESCUE"
          ]
        },
        "isCreation": {
          "type": "boolean"
        },
        "optionalFields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "thirdAppVersion": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "usagePointId": {
          "type": "string"
        },
        "webhookEnabled": {
          "type": "boolean"
        }
      }
    },
    "ActuatorSource": {
      "type": "object",
      "properties": {
        "dependentHardwareTypeId": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "string"
        },
        "lng": {
          "type": "string"
        },
        "sn": {
          "type": "integer",
          "format": "int32"
        },
        "r": {
          "type": "string"
        },
        "l": {
          "type": "string"
        },
        "al1": {
          "type": "string"
        },
        "al2": {
          "type": "string"
        },
        "c": {
          "type": "string"
        },
        "p": {
          "type": "string"
        },
        "lbl": {
          "type": "string"
        },
        "tz": {
          "type": "string"
        }
      }
    },
    "AgendaClientShort": {
      "type": "object",
      "properties": {
        "factorId": {
          "$ref": "#/definitions/EnvironmentalFactorId"
        },
        "targetValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TargetValue"
          }
        },
        "days": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "overrides": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/OverrideClientShort"
          }
        },
        "activated": {
          "type": "boolean"
        },
        "representationData": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Description"
          }
        }
      }
    },
    "AmbianceGroupDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        },
        "factorValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FactorAmbianceValue"
          }
        }
      }
    },
    "AmbianceOldDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "factorId": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        },
        "actuatorStates": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ActuatorState"
          }
        }
      }
    },
    "AndConstraints": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "constraints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Constraint"
          }
        },
        "minValidatingDurationConstraint": {
          "$ref": "#/definitions/MinValidatingDurationConstraint"
        },
        "minValidatingDurationConstraintValidation": {
          "type": "boolean"
        }
      }
    },
    "Appli": {
      "type": "object",
      "properties": {
        "scenarios": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Scenario"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ConnectorType": {
      "type": "object",
      "properties": {
        "connectorTypeId": {
          "type": "string"
        },
        "relationshipType": {
          "type": "string",
          "enum": [
            "SLAVE",
            "MASTER"
          ]
        },
        "category": {
          "type": "string"
        },
        "group_id": {
          "type": "string"
        },
        "group_name": {
          "type": "string"
        }
      }
    },
    "Constraint": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "maxEventDelay": {
          "type": "integer",
          "format": "int64"
        },
        "minEventDelay": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DataBatchBuildingDescription": {
      "type": "object",
      "properties": {
        "ba": {
          "type": "number",
          "format": "double"
        },
        "a": {
          "readOnly": true,
          "$ref": "#/definitions/Address"
        },
        "cd": {
          "type": "string"
        },
        "bt": {
          "type": "string"
        }
      }
    },
    "DataBatchConnector": {
      "type": "object",
      "properties": {
        "cTypeId": {
          "type": "string"
        },
        "itId": {
          "type": "string"
        }
      }
    },
    "DataBatchConnectorLink": {
      "type": "object",
      "properties": {
        "m": {
          "$ref": "#/definitions/DataBatchConnector"
        },
        "s": {
          "$ref": "#/definitions/DataBatchConnector"
        },
        "rep": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        }
      }
    },
    "DataBatchIT": {
      "type": "object",
      "required": [
        "as",
        "at",
        "fwv",
        "pos",
        "ver"
      ],
      "properties": {
        "itId": {
          "type": "string"
        },
        "itExtId": {
          "type": "string"
        },
        "reg": {
          "type": "boolean"
        },
        "kn": {
          "type": "boolean"
        },
        "nm": {
          "type": "string"
        },
        "comId": {
          "type": "string"
        },
        "znm": {
          "type": "string"
        },
        "imgp": {
          "type": "string"
        },
        "sup": {
          "type": "boolean"
        },
        "itTypeId": {
          "type": "string"
        },
        "acc": {
          "$ref": "#/definitions/AccountConfiguration"
        },
        "evt": {
          "$ref": "#/definitions/EventMappingConfig"
        },
        "evtMapping": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MappingConfig"
          }
        },
        "mof": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          }
        },
        "dhw": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "idhw": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "grps": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "anm": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "emb": {
          "type": "string",
          "enum": [
            "REAL",
            "INTERNAL",
            "VIRTUAL",
            "MATERIALIZED",
            "SIMULATED",
            "ALTERNATIVE",
            "GENERATED_ALTERNATIVE"
          ]
        },
        "rmv": {
          "type": "boolean"
        },
        "cus": {
          "$ref": "#/definitions/ITCustomization"
        },
        "fgid": {
          "type": "string"
        },
        "fge": {
          "type": "boolean"
        },
        "vid": {
          "type": "string"
        },
        "cts": {
          "type": "integer",
          "format": "int64"
        },
        "ver": {
          "type": "string"
        },
        "at": {
          "type": "string"
        },
        "hcids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fwv": {
          "type": "string"
        },
        "hdas": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SourceActuators"
          }
        },
        "sc": {
          "type": "string"
        },
        "pos": {
          "$ref": "#/definitions/Position"
        },
        "as": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ActuatorSource"
          }
        },
        "sComId": {
          "type": "string"
        },
        "pEGID": {
          "type": "string"
        },
        "tComId": {
          "type": "string"
        },
        "slotItIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sta": {
          "$ref": "#/definitions/DataBatchITState"
        },
        "refhids": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "intco": {
          "type": "boolean"
        }
      }
    },
    "DataBatchITState": {
      "type": "object",
      "properties": {
        "gateway": {
          "type": "boolean"
        },
        "o": {
          "type": "string",
          "enum": [
            "OK",
            "PARTIAL",
            "KO",
            "UNKNOWN"
          ]
        },
        "oC": {
          "type": "string"
        },
        "p": {
          "type": "string",
          "enum": [
            "OK",
            "IN_PROGRES",
            "KO",
            "UNKNOWN",
            "NOT_NEEDED"
          ]
        },
        "pC": {
          "type": "string"
        },
        "pTs": {
          "type": "integer",
          "format": "int64"
        },
        "r": {
          "type": "string",
          "enum": [
            "OK",
            "KO",
            "RESCUE",
            "UNKNOWN"
          ]
        },
        "rC": {
          "type": "string"
        },
        "oD": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/StateData"
          }
        },
        "pD": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/StateData"
          }
        },
        "rD": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/StateData"
          }
        }
      }
    },
    "DataBatchOfBuilding": {
      "type": "object",
      "properties": {
        "its": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataBatchIT"
          }
        },
        "userData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "type": "string"
        },
        "bid": {
          "type": "string"
        },
        "h": {
          "type": "integer",
          "format": "int64"
        },
        "kId": {
          "type": "string"
        },
        "bId": {
          "type": "string"
        },
        "z": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Zone"
          }
        },
        "itTy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IntelligentThingType"
          }
        },
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Appli"
          }
        },
        "scenars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Scenario"
          }
        },
        "desc": {
          "$ref": "#/definitions/DataBatchBuildingDescription"
        },
        "tg": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "zs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneSetting"
          }
        },
        "ambs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AmbianceDTO"
          }
        },
        "amb": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AmbianceOldDTO"
          }
        },
        "ag": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AmbianceGroupDTO"
          }
        },
        "agendas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgendaClientShort"
          }
        },
        "agendas2": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgendaClientBase"
          }
        },
        "cbs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallbackDTO"
          }
        },
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountConfiguration"
          }
        },
        "cls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataBatchConnectorLink"
          }
        },
        "szc": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Zone"
            }
          }
        }
      }
    },
    "EventMappingConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "eventMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "factor": {
          "type": "string"
        },
        "itTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hardwareTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "representations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serigraphies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultConfig": {
          "type": "boolean"
        }
      }
    },
    "FactorAmbianceValue": {
      "type": "object",
      "properties": {
        "factorId": {
          "type": "string"
        },
        "ambianceId": {
          "type": "string"
        },
        "factorValue": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "GeometricalDefinition": {
      "type": "object",
      "properties": {
        "height": {
          "type": "number",
          "format": "double"
        },
        "length": {
          "type": "number",
          "format": "double"
        },
        "width": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "HardwareDefaultDescriptions": {
      "type": "object",
      "properties": {
        "defaultDescription": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Description"
          }
        },
        "empty": {
          "type": "boolean"
        }
      }
    },
    "HardwareType": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "messageType": {
          "type": "string"
        },
        "communicationType": {
          "type": "string",
          "enum": [
            "VOID",
            "ONE_SHOT",
            "REPEAT",
            "ON_DEMAND",
            "ON_REQUEST"
          ]
        },
        "eoRorg": {
          "type": "string",
          "format": "byte"
        },
        "eoFunc": {
          "type": "string",
          "format": "byte"
        },
        "eoType": {
          "type": "string",
          "format": "byte"
        },
        "remoteLearning": {
          "type": "boolean"
        },
        "muteDelay": {
          "type": "integer",
          "format": "int64"
        },
        "channelIndex": {
          "type": "integer",
          "format": "int32"
        },
        "translationFormula": {
          "$ref": "#/definitions/TranslationFormula"
        },
        "communicationProtocol": {
          "type": "string",
          "enum": [
            "ENOCEAN",
            "MODBUS",
            "SCHEIBER",
            "WEB_SERVICES",
            "XBEE",
            "ZIGBEE",
            "NONE",
            "AVIDSEN",
            "DALI",
            "IO",
            "OVP",
            "THREAD",
            "ZWAVE",
            "VAILLANT",
            "ELIOT",
            "IR",
            "EIP_MQTT",
            "ARCOM",
            "BLE",
            "BACNET_IP"
          ]
        },
        "descriptions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Description"
          }
        },
        "pairingNeeded": {
          "type": "boolean"
        },
        "pairingSequence": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "simulated": {
          "type": "boolean"
        },
        "ackFormulaForHardware": {
          "$ref": "#/definitions/TranslationFormula"
        },
        "pairFormula": {
          "$ref": "#/definitions/TranslationFormula"
        },
        "checkFormula": {
          "$ref": "#/definitions/TranslationFormula"
        },
        "calibrationFormula": {
          "$ref": "#/definitions/TranslationFormula"
        },
        "ignoredForHash": {
          "type": "boolean"
        },
        "usableByUser": {
          "type": "boolean"
        },
        "agentType": {
          "type": "string"
        },
        "connectorTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorType"
          }
        },
        "transmitter": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "HemisZoneLink": {
      "allOf": [
        {
          "$ref": "#/definitions/ZoneLink"
        },
        {
          "type": "object",
          "required": [
            "direction"
          ],
          "properties": {
            "buildingId": {
              "type": "string"
            },
            "zoneId": {
              "type": "string"
            },
            "baseUrl": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "direction": {
              "type": "string",
              "enum": [
                "EXPORTED",
                "IMPORTED"
              ]
            },
            "includedFactors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "excludedFactors": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ITCustomization": {
      "type": "object",
      "properties": {
        "itID": {
          "type": "string"
        },
        "hardwareCustomizations": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/HardwareCustomization"
          }
        }
      }
    },
    "ITSlotType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "localRef": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "connectorTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorType"
          }
        }
      }
    },
    "IntelligentThingType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "typeName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "splittable": {
          "type": "boolean"
        },
        "learnNeeded": {
          "type": "boolean"
        },
        "hardwareTypes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/HardwareType"
          }
        },
        "descriptions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Description"
          }
        },
        "defaultDescriptions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/HardwareDefaultDescriptions"
          }
        },
        "manufacturerID": {
          "type": "string"
        },
        "category": {
          "type": "string",
          "enum": [
            "DEFAULT",
            "METER",
            "GATEWAY",
            "TAG",
            "BRIDGE",
            "ALTERNATIVE"
          ]
        },
        "applicationProtocol": {
          "type": "string"
        },
        "notificationTypes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/NotificationType"
          }
        },
        "useTrigger": {
          "type": "boolean"
        },
        "hardwareTypeSplitGroupId": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "connectorTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorType"
          }
        },
        "slotTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ITSlotType"
          }
        },
        "onlySlave": {
          "type": "boolean"
        },
        "passive": {
          "type": "boolean"
        }
      }
    },
    "IntercomZoneLink": {
      "allOf": [
        {
          "$ref": "#/definitions/ZoneLink"
        },
        {
          "type": "object",
          "required": [
            "intercomType"
          ],
          "properties": {
            "buildingId": {
              "type": "string"
            },
            "zoneId": {
              "type": "string"
            },
            "baseUrl": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "intercomType": {
              "type": "string",
              "enum": [
                "DOOR_STATION",
                "HOUSING_MONITOR"
              ]
            }
          }
        }
      ]
    },
    "MinValidatingDurationConstraint": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "maxEventDelay": {
          "type": "integer",
          "format": "int64"
        },
        "minEventDelay": {
          "type": "integer",
          "format": "int64"
        },
        "durationForValidation": {
          "type": "integer",
          "format": "int64"
        },
        "lastTimeValidation": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "NotificationType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "Objective": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "oneShotTVCalculation": {
          "type": "boolean"
        },
        "priority": {
          "type": "number",
          "format": "double"
        },
        "temporalDefinition": {
          "$ref": "#/definitions/TemporalDefinition"
        },
        "zone": {
          "$ref": "#/definitions/Zone"
        },
        "recurrentContraints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/RecurrenceConstraint"
          }
        },
        "oneShotConstraintsValidation": {
          "type": "boolean"
        },
        "forcedByUser": {
          "type": "boolean"
        },
        "groupID": {
          "type": "string"
        },
        "objectiveType": {
          "type": "string"
        },
        "propagation": {
          "type": "boolean"
        },
        "tag": {
          "type": "string"
        },
        "executable": {
          "type": "boolean"
        }
      }
    },
    "OverrideClientShort": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "intervals": {
          "type": "string"
        },
        "temporalDefinition": {
          "$ref": "#/definitions/TemporalDefinitionClient"
        }
      }
    },
    "RecurrenceConstraint": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "maxEventDelay": {
          "type": "integer",
          "format": "int64"
        },
        "minEventDelay": {
          "type": "integer",
          "format": "int64"
        },
        "recurrenceDay": {
          "type": "integer",
          "format": "int32"
        },
        "recurrenceHour": {
          "type": "integer",
          "format": "int32"
        },
        "recurrenceMonth": {
          "type": "integer",
          "format": "int32"
        },
        "recurrenceMinute": {
          "type": "integer",
          "format": "int32"
        },
        "recurrenceTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Scenario": {
      "type": "object",
      "properties": {
        "andConstraints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AndConstraints"
          }
        },
        "oneShotConstraintsValidation": {
          "type": "boolean"
        },
        "recurrenceConstraints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/RecurrenceConstraint"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "modified": {
          "type": "boolean"
        },
        "objectives": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Objective"
          }
        },
        "category": {
          "type": "string",
          "enum": [
            "UNSCPECIFIED",
            "AUTO",
            "ALERT",
            "PASSIVE"
          ]
        },
        "scenarioState": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "NOT_ADDED_ACTIVATED",
            "NOT_ADDED_DEACTIVATED",
            "NOT_ADDED_DELETED",
            "BEING_ADDED",
            "ACTIVATED",
            "DEACTIVATED",
            "BEING_DELETED",
            "DELETED"
          ]
        }
      }
    },
    "SourceActuators": {
      "type": "object",
      "properties": {
        "sourceHardwareTypeId": {
          "type": "string"
        },
        "actuatorIDs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SourceZoneLink": {
      "allOf": [
        {
          "$ref": "#/definitions/ZoneLink"
        },
        {
          "type": "object",
          "properties": {
            "sourceZoneId": {
              "type": "string"
            },
            "factor": {
              "type": "string"
            },
            "importedFactor": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "targetType": {
          "type": "string"
        },
        "targetId": {
          "type": "string"
        },
        "tagType": {
          "type": "string"
        },
        "modifable": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "imagePath": {
          "type": "string"
        }
      }
    },
    "TranslationFormula": {
      "type": "object",
      "properties": {
        "translationType": {
          "type": "string",
          "enum": [
            "DIRECT",
            "ENOCEAN",
            "AVIDSEN",
            "MAP",
            "EXTRACT"
          ]
        },
        "map": {
          "type": "string"
        },
        "mapEOLink": {
          "type": "string"
        },
        "startWith": {
          "type": "string"
        },
        "constantPart": {
          "type": "string"
        },
        "valueFirstIndex": {
          "type": "integer",
          "format": "int32"
        },
        "valueLastIndex": {
          "type": "integer",
          "format": "int32"
        },
        "learnBitValue": {
          "type": "integer",
          "format": "int32"
        },
        "divLastIndex": {
          "type": "integer",
          "format": "int32"
        },
        "divMap": {
          "type": "string"
        },
        "datatypeToExtract": {
          "type": "integer",
          "format": "int32"
        },
        "channelIndex": {
          "type": "integer",
          "format": "int32"
        },
        "channelIndexLength": {
          "type": "integer",
          "format": "int32"
        },
        "channelIndexToExtract": {
          "type": "integer",
          "format": "int32"
        },
        "a": {
          "type": "number",
          "format": "double"
        },
        "b": {
          "type": "number",
          "format": "double"
        },
        "g": {
          "type": "number",
          "format": "double"
        },
        "misc": {
          "type": "string",
          "format": "byte"
        },
        "hasFrameCounter": {
          "type": "boolean"
        },
        "dtindex": {
          "type": "integer",
          "format": "int32"
        },
        "lrnbindex": {
          "type": "integer",
          "format": "int32"
        },
        "divfirstIndex": {
          "type": "integer",
          "format": "int32"
        },
        "dtindexLength": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Zone": {
      "type": "object",
      "properties": {
        "geometricalDefinition": {
          "$ref": "#/definitions/GeometricalDefinition"
        },
        "name": {
          "type": "string"
        },
        "realZone": {
          "type": "boolean"
        },
        "subZones": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Zone"
          }
        },
        "imagePath": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "removed": {
          "type": "boolean"
        },
        "surface": {
          "type": "number",
          "format": "double"
        },
        "inertiaInfo": {
          "$ref": "#/definitions/ZoneInertiaInfo"
        },
        "notificationTypes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/NotificationType"
          }
        },
        "links": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ZoneLink"
          }
        },
        "floor": {
          "type": "integer",
          "format": "int32"
        },
        "external": {
          "type": "boolean"
        }
      }
    },
    "ZoneInertiaInfo": {
      "type": "object",
      "properties": {
        "customTmpRisingSpeed": {
          "type": "number",
          "format": "double"
        },
        "customTmpFallingSpeed": {
          "type": "number",
          "format": "double"
        },
        "learnedPassiveTmpRisingSpeed": {
          "type": "number",
          "format": "double"
        },
        "learnedPassiveTmpFallingSpeed": {
          "type": "number",
          "format": "double"
        },
        "learnedActiveTmpRisingSpeed": {
          "type": "number",
          "format": "double"
        },
        "learnedActiveTmpFallingSpeed": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ZoneLink": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "ZoneSetting": {
      "type": "object",
      "properties": {
        "zoneSettingId": {
          "$ref": "#/definitions/ZoneSettingId"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ZoneSettingId": {
      "type": "object",
      "properties": {
        "settingId": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        }
      }
    },
    "EnvironmentalFactorType": {
      "type": "object",
      "properties": {
        "factor": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "risingSpeed": {
          "type": "number",
          "format": "double"
        },
        "fallingSpeed": {
          "type": "number",
          "format": "double"
        },
        "inertia": {
          "type": "integer",
          "format": "int64"
        },
        "feelingFactor": {
          "type": "boolean"
        },
        "individualFactor": {
          "type": "boolean"
        },
        "forcePropagation": {
          "type": "boolean"
        },
        "minPossibleValue": {
          "type": "number",
          "format": "double"
        },
        "maxPossibleValue": {
          "type": "number",
          "format": "double"
        },
        "pressureTensionUpdateFrequency": {
          "type": "integer",
          "format": "int64"
        },
        "obsolescentDuration": {
          "type": "integer",
          "format": "int64"
        },
        "perceptionDelay": {
          "type": "integer",
          "format": "int64"
        },
        "aggregationType": {
          "type": "string",
          "enum": [
            "NONE",
            "MINIMUM",
            "MAXIMUM",
            "AVERAGE",
            "SUM",
            "LAST",
            "FEELING",
            "ACTION",
            "FEEDBACK",
            "ATLEASTONE"
          ]
        },
        "category": {
          "type": "string",
          "enum": [
            "ENVIRONMENT",
            "INDEX",
            "HARDWARE_DATA",
            "HARDWARE_PARAMETER",
            "SYSTEM"
          ]
        },
        "quantitative": {
          "type": "boolean"
        }
      }
    },
    "BuildingDescription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "Maison",
            "Appartement",
            "Bureau",
            "Commercial",
            "Collectivite",
            "Education"
          ]
        },
        "buildingArea": {
          "type": "number",
          "format": "double"
        },
        "etages": {
          "type": "integer",
          "format": "int32"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "creationPeriod": {
          "type": "string"
        },
        "isolation": {
          "type": "string"
        }
      }
    },
    "Authorization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "hemis_level": {
          "type": "string"
        },
        "creation_date": {
          "type": "integer",
          "format": "int64"
        },
        "last_update": {
          "type": "integer",
          "format": "int64"
        },
        "expiration_date": {
          "type": "integer",
          "format": "int64"
        },
        "hash_key": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "activated": {
          "type": "boolean"
        },
        "transfer": {
          "type": "boolean"
        },
        "eraseAuthorizations": {
          "type": "boolean"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "entity_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "user_brand": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "creation_date": {
          "type": "integer",
          "format": "int64"
        },
        "activated": {
          "type": "boolean"
        },
        "pass_reset": {
          "type": "boolean"
        },
        "last_login": {
          "type": "integer",
          "format": "int64"
        },
        "nb_authorization": {
          "type": "integer",
          "format": "int32"
        },
        "birth_date": {
          "type": "string"
        },
        "newsletter": {
          "type": "boolean"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nb_max_hemis": {
          "type": "integer",
          "format": "int32"
        },
        "nb_connexion": {
          "type": "integer",
          "format": "int32"
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "BuildingSecurityConfigExport": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "KernelStatus": {
      "type": "object",
      "properties": {
        "kernelId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "STARTING",
            "STARTED",
            "STOPPED",
            "STOPPING",
            "STARTED_DB_PB",
            "STARTED_NOT_WORKING",
            "STARTED_ERROR",
            "STARTED_WARN",
            "WAITING"
          ]
        },
        "startDate": {
          "type": "integer",
          "format": "int64"
        },
        "buildingId": {
          "type": "string"
        },
        "dataManagerStarted": {
          "type": "boolean"
        },
        "migrationState": {
          "type": "string"
        },
        "lastModifiedStructure": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PublicData": {
      "type": "object",
      "properties": {
        "itTypesPerZone": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "HemisLockStatus": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "LOCKED",
            "UNLOCKED"
          ]
        },
        "lockTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "unlockTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lockoutDelay": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AmbTagResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/TagResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BuildingTagResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/TagResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "type": "string"
            }
          }
        }
      ]
    },
    "EmptyTagResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/TagResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "$ref": "#/definitions/Tag"
            }
          }
        }
      ]
    },
    "EventTagResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/TagResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "type": "string"
            }
          }
        }
      ]
    },
    "FactorTagResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/TagResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GatewayTagResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/TagResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/ITInformation"
              }
            }
          }
        }
      ]
    },
    "HemisKeyTagResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/TagResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ITTagResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/TagResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/ITInformation"
              }
            }
          }
        }
      ]
    },
    "MeterTagResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/TagResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TagResponse": {
      "type": "object",
      "discriminator": "targetType",
      "properties": {
        "unknown": {
          "type": "boolean"
        },
        "response": {
          "type": "object"
        },
        "tag": {
          "$ref": "#/definitions/Tag"
        }
      }
    },
    "ZoneTagResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/TagResponse"
        },
        {
          "type": "object",
          "properties": {
            "response": {
              "$ref": "#/definitions/ZoneClient"
            }
          }
        }
      ]
    },
    "ChronoFieldValues": {
      "type": "object",
      "properties": {
        "match_values": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "Interval": {
      "type": "object",
      "properties": {
        "begin": {
          "type": "integer",
          "format": "int64"
        },
        "end": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Partial": {
      "type": "object",
      "properties": {
        "fields_list": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ChronoFieldValues"
          }
        }
      }
    },
    "Tarif": {
      "type": "object",
      "properties": {
        "provider_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "time_constraint": {
          "$ref": "#/definitions/TimeConstraint"
        }
      }
    },
    "Tarification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "actual": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "factor_id": {
          "$ref": "#/definitions/EnvironmentalFactorId"
        },
        "date_of_activation": {
          "type": "integer",
          "format": "int64"
        },
        "currency_unit": {
          "type": "string"
        },
        "factor_unit": {
          "type": "string",
          "readOnly": true
        },
        "tarifs_list": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Tarif"
          }
        },
        "infos": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TimeConstraint": {
      "type": "object",
      "properties": {
        "partials_list": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Partial"
          }
        },
        "absolutes_list": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Interval"
          }
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "hemisVersion": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        },
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "permissions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "zoneRoles": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "stompEnabled": {
          "type": "boolean"
        }
      }
    },
    "Anomaly": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "creationDate": {
          "type": "integer",
          "format": "int64"
        },
        "expirationDate": {
          "type": "integer",
          "format": "int64"
        },
        "zone": {
          "type": "string"
        },
        "content": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FullWeatherInformation": {
      "type": "object",
      "properties": {
        "histo": {
          "$ref": "#/definitions/WeatherHistoricInformation"
        },
        "current": {
          "$ref": "#/definitions/WeatherInformation"
        },
        "forecast": {
          "$ref": "#/definitions/WeatherForecastInformationAccurate"
        }
      }
    },
    "WeatherForecastInformationAccurate": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeatherInformationAccurate"
          }
        }
      }
    },
    "WeatherHistoricInformation": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeatherInformation"
          }
        }
      }
    },
    "WeatherInformation": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "clouds": {
          "type": "number",
          "format": "double"
        },
        "humidity": {
          "type": "number",
          "format": "double"
        },
        "pressure": {
          "type": "number",
          "format": "double"
        },
        "sunrise": {
          "type": "integer",
          "format": "int64"
        },
        "sunset": {
          "type": "integer",
          "format": "int64"
        },
        "temperature": {
          "type": "number",
          "format": "double"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "weather": {
          "type": "string"
        },
        "weather_code": {
          "type": "integer",
          "format": "int32"
        },
        "weather_description": {
          "type": "string"
        },
        "weather_icon": {
          "type": "string"
        },
        "wind_direction": {
          "type": "number",
          "format": "double"
        },
        "wind_speed": {
          "type": "number",
          "format": "double"
        },
        "sunEffectIndictator": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "WeatherInformationAccurate": {
      "type": "object",
      "properties": {
        "clouds": {
          "type": "number",
          "format": "double"
        },
        "humidity": {
          "type": "number",
          "format": "double"
        },
        "pressure": {
          "type": "number",
          "format": "double"
        },
        "temperature": {
          "type": "number",
          "format": "double"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "weather": {
          "type": "string"
        },
        "weather_code": {
          "type": "integer",
          "format": "int32"
        },
        "weather_description": {
          "type": "string"
        },
        "weather_icon": {
          "type": "string"
        },
        "wind_direction": {
          "type": "number",
          "format": "double"
        },
        "wind_speed": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "WeatherForecastInformation": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeatherInformation"
          }
        }
      }
    }
  }
}